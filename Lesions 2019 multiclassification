{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3fd4fb6f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-23T20:56:56.446754Z",
     "iopub.status.busy": "2024-06-23T20:56:56.445828Z",
     "iopub.status.idle": "2024-06-23T20:57:02.358790Z",
     "shell.execute_reply": "2024-06-23T20:57:02.357900Z"
    },
    "papermill": {
     "duration": 5.923648,
     "end_time": "2024-06-23T20:57:02.361031",
     "exception": false,
     "start_time": "2024-06-23T20:56:56.437383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import models, transforms\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from PIL import Image\n",
    "import torch\n",
    "import os\n",
    "import pandas as pd\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8367e493",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.375295Z",
     "iopub.status.busy": "2024-06-23T20:57:02.374856Z",
     "iopub.status.idle": "2024-06-23T20:57:02.512867Z",
     "shell.execute_reply": "2024-06-23T20:57:02.512074Z"
    },
    "papermill": {
     "duration": 0.147641,
     "end_time": "2024-06-23T20:57:02.515181",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.367540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_ground_truth = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_GroundTruth.csv\")\n",
    "df_metadata = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_Metadata.csv\")\n",
    "df = pd.merge(df_ground_truth, df_metadata, on='image', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "37f3075d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.529036Z",
     "iopub.status.busy": "2024-06-23T20:57:02.528716Z",
     "iopub.status.idle": "2024-06-23T20:57:02.533059Z",
     "shell.execute_reply": "2024-06-23T20:57:02.531989Z"
    },
    "papermill": {
     "duration": 0.014713,
     "end_time": "2024-06-23T20:57:02.536297",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.521584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_dir = \"/kaggle/input/isic-2019/ISIC_2019_Training_Input/ISIC_2019_Training_Input\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d64d38d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.552367Z",
     "iopub.status.busy": "2024-06-23T20:57:02.551433Z",
     "iopub.status.idle": "2024-06-23T20:57:02.561852Z",
     "shell.execute_reply": "2024-06-23T20:57:02.560127Z"
    },
    "papermill": {
     "duration": 0.020252,
     "end_time": "2024-06-23T20:57:02.564209",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.543957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"UNK\", \"lesion_id\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e64a9d9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.577787Z",
     "iopub.status.busy": "2024-06-23T20:57:02.577473Z",
     "iopub.status.idle": "2024-06-23T20:57:02.601755Z",
     "shell.execute_reply": "2024-06-23T20:57:02.600823Z"
    },
    "papermill": {
     "duration": 0.033424,
     "end_time": "2024-06-23T20:57:02.603822",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.570398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>posterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "  anatom_site_general     sex  \n",
       "0      anterior torso  female  \n",
       "1      anterior torso  female  \n",
       "2     upper extremity  female  \n",
       "3     upper extremity    male  \n",
       "4     posterior torso    male  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2f934d6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.619052Z",
     "iopub.status.busy": "2024-06-23T20:57:02.618449Z",
     "iopub.status.idle": "2024-06-23T20:57:02.644828Z",
     "shell.execute_reply": "2024-06-23T20:57:02.643695Z"
    },
    "papermill": {
     "duration": 0.035846,
     "end_time": "2024-06-23T20:57:02.646973",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.611127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25331 entries, 0 to 25330\n",
      "Data columns (total 12 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   image                25331 non-null  object \n",
      " 1   MEL                  25331 non-null  float64\n",
      " 2   NV                   25331 non-null  float64\n",
      " 3   BCC                  25331 non-null  float64\n",
      " 4   AK                   25331 non-null  float64\n",
      " 5   BKL                  25331 non-null  float64\n",
      " 6   DF                   25331 non-null  float64\n",
      " 7   VASC                 25331 non-null  float64\n",
      " 8   SCC                  25331 non-null  float64\n",
      " 9   age_approx           24894 non-null  float64\n",
      " 10  anatom_site_general  22700 non-null  object \n",
      " 11  sex                  24947 non-null  object \n",
      "dtypes: float64(9), object(3)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d2eb89c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.661911Z",
     "iopub.status.busy": "2024-06-23T20:57:02.661580Z",
     "iopub.status.idle": "2024-06-23T20:57:02.669395Z",
     "shell.execute_reply": "2024-06-23T20:57:02.668466Z"
    },
    "papermill": {
     "duration": 0.017366,
     "end_time": "2024-06-23T20:57:02.671553",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.654187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/290600658.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['age_approx'].fillna(median_age, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "median_age = df['age_approx'].median()\n",
    "df['age_approx'].fillna(median_age, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d89f4489",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.685967Z",
     "iopub.status.busy": "2024-06-23T20:57:02.685685Z",
     "iopub.status.idle": "2024-06-23T20:57:02.699468Z",
     "shell.execute_reply": "2024-06-23T20:57:02.698771Z"
    },
    "papermill": {
     "duration": 0.023214,
     "end_time": "2024-06-23T20:57:02.701534",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.678320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9a3619e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:02.715873Z",
     "iopub.status.busy": "2024-06-23T20:57:02.715561Z",
     "iopub.status.idle": "2024-06-23T20:57:03.746662Z",
     "shell.execute_reply": "2024-06-23T20:57:03.745651Z"
    },
    "papermill": {
     "duration": 1.040908,
     "end_time": "2024-06-23T20:57:03.749127",
     "exception": false,
     "start_time": "2024-06-23T20:57:02.708219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "one_hot = pd.get_dummies(df[[\"anatom_site_general\", \"sex\"]], drop_first=True)\n",
    "\n",
    "df = df.drop([\"anatom_site_general\", \"sex\"], axis=1)\n",
    "df = pd.concat([df, one_hot], axis=1)\n",
    "\n",
    "bool_columns = df.select_dtypes(include=['bool']).columns\n",
    "df[bool_columns] = df[bool_columns].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fb59104f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:03.765870Z",
     "iopub.status.busy": "2024-06-23T20:57:03.765139Z",
     "iopub.status.idle": "2024-06-23T20:57:03.792557Z",
     "shell.execute_reply": "2024-06-23T20:57:03.791690Z"
    },
    "papermill": {
     "duration": 0.037528,
     "end_time": "2024-06-23T20:57:03.794752",
     "exception": false,
     "start_time": "2024-06-23T20:57:03.757224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "   anatom_site_general_head/neck  anatom_site_general_lateral torso  \\\n",
       "0                              0                                  0   \n",
       "1                              0                                  0   \n",
       "2                              0                                  0   \n",
       "3                              0                                  0   \n",
       "4                              0                                  0   \n",
       "\n",
       "   anatom_site_general_lower extremity  anatom_site_general_oral/genital  \\\n",
       "0                                    0                                 0   \n",
       "1                                    0                                 0   \n",
       "2                                    0                                 0   \n",
       "3                                    0                                 0   \n",
       "4                                    0                                 0   \n",
       "\n",
       "   anatom_site_general_palms/soles  anatom_site_general_posterior torso  \\\n",
       "0                                0                                    0   \n",
       "1                                0                                    0   \n",
       "2                                0                                    0   \n",
       "3                                0                                    0   \n",
       "4                                0                                    1   \n",
       "\n",
       "   anatom_site_general_upper extremity  sex_male  \n",
       "0                                    0         0  \n",
       "1                                    0         0  \n",
       "2                                    1         0  \n",
       "3                                    1         1  \n",
       "4                                    0         1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9bb5b55b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:03.811552Z",
     "iopub.status.busy": "2024-06-23T20:57:03.810809Z",
     "iopub.status.idle": "2024-06-23T20:57:03.928639Z",
     "shell.execute_reply": "2024-06-23T20:57:03.927178Z"
    },
    "papermill": {
     "duration": 0.128465,
     "end_time": "2024-06-23T20:57:03.930799",
     "exception": false,
     "start_time": "2024-06-23T20:57:03.802334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: 14419\n",
      "Validation set size: 3605\n",
      "Test set size: 4507\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_val_df, test_df = train_test_split(df, test_size=0.2, random_state=42, stratify=df['MEL'])\n",
    "\n",
    "# Then, split the training+validation set into training and validation sets\n",
    "train_df, val_df = train_test_split(train_val_df, test_size=0.2, random_state=42, stratify=train_val_df['MEL'])\n",
    "\n",
    "print(f\"Train set size: {len(train_df)}\")\n",
    "print(f\"Validation set size: {len(val_df)}\")\n",
    "print(f\"Test set size: {len(test_df)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "294a7fea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:03.946618Z",
     "iopub.status.busy": "2024-06-23T20:57:03.946296Z",
     "iopub.status.idle": "2024-06-23T20:57:03.954073Z",
     "shell.execute_reply": "2024-06-23T20:57:03.953137Z"
    },
    "papermill": {
     "duration": 0.017738,
     "end_time": "2024-06-23T20:57:03.956008",
     "exception": false,
     "start_time": "2024-06-23T20:57:03.938270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MelanomaDataset(Dataset):\n",
    "    def __init__(self, df, img_dir, transform):\n",
    "        self.img_dir = img_dir\n",
    "        self.df = df\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img_name = os.path.join(self.img_dir, self.df.iloc[idx, 0] + '.jpg')  # Assuming .jpg extension\n",
    "        image = Image.open(img_name)\n",
    "        if transform:\n",
    "            image = self.transform(image)\n",
    "        values = np.array(self.df.iloc[idx, 9:].values, dtype=np.float32)\n",
    "        \n",
    "        characteristics = torch.tensor(values, dtype=torch.float32)\n",
    "        label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n",
    "        return image, characteristics, label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3ba4d74a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:03.971881Z",
     "iopub.status.busy": "2024-06-23T20:57:03.971162Z",
     "iopub.status.idle": "2024-06-23T20:57:03.977240Z",
     "shell.execute_reply": "2024-06-23T20:57:03.976369Z"
    },
    "papermill": {
     "duration": 0.016193,
     "end_time": "2024-06-23T20:57:03.979202",
     "exception": false,
     "start_time": "2024-06-23T20:57:03.963009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "transform = transforms.Compose([\n",
    "    transforms.Resize((16, 16)),  # Resize to match input size of the model\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a77a12da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:03.994187Z",
     "iopub.status.busy": "2024-06-23T20:57:03.993889Z",
     "iopub.status.idle": "2024-06-23T20:57:03.999792Z",
     "shell.execute_reply": "2024-06-23T20:57:03.998848Z"
    },
    "papermill": {
     "duration": 0.01561,
     "end_time": "2024-06-23T20:57:04.001749",
     "exception": false,
     "start_time": "2024-06-23T20:57:03.986139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = MelanomaDataset(train_df, images_dir, transform)\n",
    "val_dataset = MelanomaDataset(val_df, images_dir, transform)\n",
    "test_dataset = MelanomaDataset(test_df, images_dir, transform)\n",
    "\n",
    "# Create DataLoader for each dataset\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=128, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e11185d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:04.017153Z",
     "iopub.status.busy": "2024-06-23T20:57:04.016503Z",
     "iopub.status.idle": "2024-06-23T20:57:04.027102Z",
     "shell.execute_reply": "2024-06-23T20:57:04.026223Z"
    },
    "papermill": {
     "duration": 0.020349,
     "end_time": "2024-06-23T20:57:04.029047",
     "exception": false,
     "start_time": "2024-06-23T20:57:04.008698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CombinedModel(nn.Module):\n",
    "    def __init__(self, num_tabular_features):\n",
    "        super(CombinedModel, self).__init__()\n",
    "        self.cnn = models.resnet18(weights=True)\n",
    "        self.cnn.fc = nn.Identity()  # Remove the final classification layer\n",
    "        \n",
    "        self.tabular_fc1 = nn.Linear(num_tabular_features, 128)\n",
    "        self.tabular_fc2 = nn.Linear(128, 64)\n",
    "        \n",
    "        self.fc1 = nn.Linear(512 + 64, 128)  # Combining CNN and tabular features\n",
    "        self.fc2 = nn.Linear(128, 8)  # Assuming binary classification\n",
    "\n",
    "    def forward(self, image, tabular_data):\n",
    "        cnn_features = self.cnn(image)\n",
    "        \n",
    "        tabular_out = nn.ReLU()(self.tabular_fc1(tabular_data))\n",
    "        tabular_out = nn.ReLU()(self.tabular_fc2(tabular_out))\n",
    "        \n",
    "        combined_features = torch.cat((cnn_features, tabular_out), dim=1)\n",
    "        x = nn.ReLU()(self.fc1(combined_features))\n",
    "        x = self.fc2(x)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "09d0a007",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:04.044113Z",
     "iopub.status.busy": "2024-06-23T20:57:04.043798Z",
     "iopub.status.idle": "2024-06-23T20:57:04.528074Z",
     "shell.execute_reply": "2024-06-23T20:57:04.527100Z"
    },
    "papermill": {
     "duration": 0.494197,
     "end_time": "2024-06-23T20:57:04.530082",
     "exception": false,
     "start_time": "2024-06-23T20:57:04.035885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0.0182, 0.0074, 0.0244, 0.0938, 0.0339, 0.3374, 0.3572, 0.1275],\n",
       "       device='cuda:0')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "A = np.array([df[cls].sum() for cls in df.columns[1:9]])\n",
    "\n",
    "class_weights = len(df) / A\n",
    "weights_tensor = torch.tensor(class_weights, dtype=torch.float).to(device)\n",
    "\n",
    "normalized_weights_tensor = (1/sum(weights_tensor)) * weights_tensor\n",
    "normalized_weights_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "07fa27f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:04.545719Z",
     "iopub.status.busy": "2024-06-23T20:57:04.545349Z",
     "iopub.status.idle": "2024-06-23T20:57:05.514055Z",
     "shell.execute_reply": "2024-06-23T20:57:05.513249Z"
    },
    "papermill": {
     "duration": 0.979018,
     "end_time": "2024-06-23T20:57:05.516267",
     "exception": false,
     "start_time": "2024-06-23T20:57:04.537249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n",
      "100%|██████████| 44.7M/44.7M [00:00<00:00, 101MB/s]\n"
     ]
    }
   ],
   "source": [
    "num_tabular_features = len(df.columns[9:])\n",
    "print(num_tabular_features)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()#weight=normalized_weights_tensor) \n",
    "model = CombinedModel(num_tabular_features).to(device)\n",
    "optimizer = optim.Adam(lr=0.001, params=model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "61b291bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T20:57:05.533576Z",
     "iopub.status.busy": "2024-06-23T20:57:05.533244Z",
     "iopub.status.idle": "2024-06-23T21:35:31.072686Z",
     "shell.execute_reply": "2024-06-23T21:35:31.071741Z"
    },
    "papermill": {
     "duration": 2305.562027,
     "end_time": "2024-06-23T21:35:31.086405",
     "exception": false,
     "start_time": "2024-06-23T20:57:05.524378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/10], Step [0], Loss: 2.1321\n",
      "Epoch [1/10], Step [50], Loss: 1.1377\n",
      "Epoch [1/10], Step [100], Loss: 1.0823\n",
      "Epoch [1/10], Average Training Loss: 1.1846\n",
      "Epoch [1/10], Validation Loss: 1.0595, Validation Accuracy: 62.50%\n",
      "Epoch [2/10], Step [0], Loss: 1.1224\n",
      "Epoch [2/10], Step [50], Loss: 0.9941\n",
      "Epoch [2/10], Step [100], Loss: 0.9717\n",
      "Epoch [2/10], Average Training Loss: 1.0494\n",
      "Epoch [2/10], Validation Loss: 1.0302, Validation Accuracy: 64.05%\n",
      "Epoch [3/10], Step [0], Loss: 0.8839\n",
      "Epoch [3/10], Step [50], Loss: 0.8905\n",
      "Epoch [3/10], Step [100], Loss: 0.9655\n",
      "Epoch [3/10], Average Training Loss: 0.9927\n",
      "Epoch [3/10], Validation Loss: 0.9852, Validation Accuracy: 66.05%\n",
      "Epoch [4/10], Step [0], Loss: 0.7209\n",
      "Epoch [4/10], Step [50], Loss: 0.9378\n",
      "Epoch [4/10], Step [100], Loss: 1.0867\n",
      "Epoch [4/10], Average Training Loss: 0.9635\n",
      "Epoch [4/10], Validation Loss: 0.9873, Validation Accuracy: 65.55%\n",
      "Epoch [5/10], Step [0], Loss: 0.8427\n",
      "Epoch [5/10], Step [50], Loss: 0.8599\n",
      "Epoch [5/10], Step [100], Loss: 1.0789\n",
      "Epoch [5/10], Average Training Loss: 0.9269\n",
      "Epoch [5/10], Validation Loss: 0.9996, Validation Accuracy: 65.21%\n",
      "Epoch [6/10], Step [0], Loss: 0.8590\n",
      "Epoch [6/10], Step [50], Loss: 0.8384\n",
      "Epoch [6/10], Step [100], Loss: 1.0136\n",
      "Epoch [6/10], Average Training Loss: 0.8948\n",
      "Epoch [6/10], Validation Loss: 0.9701, Validation Accuracy: 65.99%\n",
      "Epoch [7/10], Step [0], Loss: 0.8660\n",
      "Epoch [7/10], Step [50], Loss: 0.8928\n",
      "Epoch [7/10], Step [100], Loss: 0.8294\n",
      "Epoch [7/10], Average Training Loss: 0.8603\n",
      "Epoch [7/10], Validation Loss: 0.9357, Validation Accuracy: 67.24%\n",
      "Epoch [8/10], Step [0], Loss: 0.8197\n",
      "Epoch [8/10], Step [50], Loss: 0.8635\n",
      "Epoch [8/10], Step [100], Loss: 0.6465\n",
      "Epoch [8/10], Average Training Loss: 0.8241\n",
      "Epoch [8/10], Validation Loss: 0.9653, Validation Accuracy: 66.30%\n",
      "Epoch [9/10], Step [0], Loss: 0.7738\n",
      "Epoch [9/10], Step [50], Loss: 0.9318\n",
      "Epoch [9/10], Step [100], Loss: 0.7034\n",
      "Epoch [9/10], Average Training Loss: 0.7936\n",
      "Epoch [9/10], Validation Loss: 0.9328, Validation Accuracy: 67.43%\n",
      "Epoch [10/10], Step [0], Loss: 0.6648\n",
      "Epoch [10/10], Step [50], Loss: 0.7359\n",
      "Epoch [10/10], Step [100], Loss: 0.6791\n",
      "Epoch [10/10], Average Training Loss: 0.7458\n",
      "Epoch [10/10], Validation Loss: 0.9526, Validation Accuracy: 66.35%\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 10\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for batch_idx, (images, tabular_data, labels) in enumerate(train_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images, tabular_data)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        if batch_idx % 50 == 0:\n",
    "            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}], Loss: {loss.item():.4f}')\n",
    "    \n",
    "    avg_train_loss = running_loss / len(train_loader)\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Average Training Loss: {avg_train_loss:.4f}')\n",
    "    \n",
    "    # Validation loop\n",
    "    model.eval()\n",
    "    val_running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (images, tabular_data, labels) in enumerate(val_loader):\n",
    "            images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "            outputs = model(images, tabular_data)\n",
    "            val_loss = criterion(outputs, labels)\n",
    "            val_running_loss += val_loss.item()\n",
    "\n",
    "            # Convert one-hot encoded ground truth labels to class indices\n",
    "            true_labels = torch.argmax(labels, dim=1)\n",
    "\n",
    "            # Get the predicted class indices\n",
    "            predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted_labels == true_labels).sum().item()\n",
    "    \n",
    "    avg_val_loss = val_running_loss / len(val_loader)\n",
    "    val_accuracy = 100 * correct / total\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Validation Loss: {avg_val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f074e123",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T21:35:31.110841Z",
     "iopub.status.busy": "2024-06-23T21:35:31.110524Z",
     "iopub.status.idle": "2024-06-23T21:36:59.518024Z",
     "shell.execute_reply": "2024-06-23T21:36:59.517023Z"
    },
    "papermill": {
     "duration": 88.434358,
     "end_time": "2024-06-23T21:36:59.532381",
     "exception": false,
     "start_time": "2024-06-23T21:35:31.098023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 0.9945, Test Accuracy: 65.14%\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         MEL       0.59      0.48      0.53       870\n",
      "          NV       0.78      0.90      0.83      2127\n",
      "         BCC       0.61      0.53      0.57       664\n",
      "          AK       0.23      0.28      0.26       186\n",
      "         BKL       0.45      0.35      0.40       458\n",
      "          DF       0.50      0.04      0.07        50\n",
      "        VASC       0.83      0.31      0.45        32\n",
      "         SCC       0.17      0.23      0.20       120\n",
      "\n",
      "    accuracy                           0.65      4507\n",
      "   macro avg       0.52      0.39      0.41      4507\n",
      "weighted avg       0.64      0.65      0.64      4507\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "model.eval()\n",
    "test_running_loss = 0.0\n",
    "correct = 0\n",
    "total = 0\n",
    "all_true_labels = []\n",
    "all_predicted_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for idx, (images, tabular_data, labels) in enumerate(test_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        outputs = model(images, tabular_data)\n",
    "        test_loss = criterion(outputs, labels)\n",
    "        test_running_loss += test_loss.item()\n",
    "\n",
    "        true_labels = torch.argmax(labels, dim=1)\n",
    "        predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "        all_true_labels.extend(true_labels.cpu().numpy())\n",
    "        all_predicted_labels.extend(predicted_labels.cpu().numpy())\n",
    "\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted_labels == true_labels).sum().item()\n",
    "\n",
    "avg_test_loss = test_running_loss / len(test_loader)\n",
    "test_accuracy = 100 * correct / total\n",
    "print(f'Test Loss: {avg_test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%')\n",
    "\n",
    "# Generate classification report\n",
    "class_names = ['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']\n",
    "report = classification_report(all_true_labels, all_predicted_labels, target_names=class_names)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "773de0fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T21:36:59.557305Z",
     "iopub.status.busy": "2024-06-23T21:36:59.557019Z",
     "iopub.status.idle": "2024-06-23T21:36:59.562362Z",
     "shell.execute_reply": "2024-06-23T21:36:59.561524Z"
    },
    "papermill": {
     "duration": 0.020088,
     "end_time": "2024-06-23T21:36:59.564246",
     "exception": false,
     "start_time": "2024-06-23T21:36:59.544158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #Test set on image input (64*64*3 with weights frequency_based and batch size 128): 67.34%\n",
    "# Test Loss: 1.3568, Test Accuracy: 69.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.57      0.59      0.58       870\n",
    "#           NV       0.81      0.87      0.84      2127\n",
    "#          BCC       0.60      0.82      0.69       664\n",
    "#           AK       0.54      0.23      0.32       186\n",
    "#          BKL       0.54      0.24      0.33       458\n",
    "#           DF       0.86      0.12      0.21        50\n",
    "#         VASC       0.41      0.69      0.51        32\n",
    "#          SCC       0.34      0.24      0.28       120\n",
    "\n",
    "#     accuracy                           0.69      4507\n",
    "#    macro avg       0.58      0.48      0.47      4507\n",
    "# weighted avg       0.68      0.69      0.67      4507\n",
    "\n",
    "# #Test set on image input (256*256*3 with weights proportionaly-inverse, normalized and batch size 128):\n",
    "# Test Loss: 0.0378, Test Accuracy: 54.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.58      0.41      0.48       870\n",
    "#           NV       0.91      0.61      0.73      2127\n",
    "#          BCC       0.63      0.53      0.58       664\n",
    "#           AK       0.23      0.66      0.34       186\n",
    "#          BKL       0.25      0.47      0.33       458\n",
    "#           DF       0.20      0.50      0.28        50\n",
    "#         VASC       0.19      0.91      0.31        32\n",
    "#          SCC       0.19      0.34      0.24       120\n",
    "\n",
    "#     accuracy                           0.54      4507\n",
    "#    macro avg       0.40      0.55      0.41      4507\n",
    "# weighted avg       0.68      0.54      0.58      4507\n",
    "\n",
    "\n",
    "# #Test set on image input (256*256*3 with no weights and batch size 128): \n",
    "# Test Loss: 1.4176, Test Accuracy: 70.42%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.67      0.50      0.57       870\n",
    "#           NV       0.74      0.94      0.83      2127\n",
    "#          BCC       0.69      0.77      0.73       664\n",
    "#           AK       0.42      0.32      0.36       186\n",
    "#          BKL       0.66      0.27      0.38       458\n",
    "#           DF       0.62      0.10      0.17        50\n",
    "#         VASC       0.68      0.72      0.70        32\n",
    "#          SCC       0.44      0.19      0.27       120\n",
    "\n",
    "#     accuracy                           0.70      4507\n",
    "#    macro avg       0.62      0.47      0.50      4507\n",
    "# weighted avg       0.69      0.70      0.68      4507"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de100082",
   "metadata": {
    "papermill": {
     "duration": 0.011569,
     "end_time": "2024-06-23T21:36:59.632166",
     "exception": false,
     "start_time": "2024-06-23T21:36:59.620597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 679322,
     "sourceId": 1193409,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2407.392717,
   "end_time": "2024-06-23T21:37:01.070938",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-23T20:56:53.678221",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
