{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1ef7def0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:27.472986Z",
     "iopub.status.busy": "2024-06-24T15:51:27.472646Z",
     "iopub.status.idle": "2024-06-24T15:51:33.620174Z",
     "shell.execute_reply": "2024-06-24T15:51:33.619244Z"
    },
    "papermill": {
     "duration": 6.158794,
     "end_time": "2024-06-24T15:51:33.622637",
     "exception": false,
     "start_time": "2024-06-24T15:51:27.463843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import models, transforms\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from PIL import Image\n",
    "import torch\n",
    "import os\n",
    "import pandas as pd\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "62ce5d88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:33.639498Z",
     "iopub.status.busy": "2024-06-24T15:51:33.639057Z",
     "iopub.status.idle": "2024-06-24T15:51:33.807517Z",
     "shell.execute_reply": "2024-06-24T15:51:33.806457Z"
    },
    "papermill": {
     "duration": 0.179961,
     "end_time": "2024-06-24T15:51:33.810111",
     "exception": false,
     "start_time": "2024-06-24T15:51:33.630150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_ground_truth = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_GroundTruth.csv\")\n",
    "df_metadata = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_Metadata.csv\")\n",
    "df = pd.merge(df_ground_truth, df_metadata, on='image', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b0ee5882",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:33.826442Z",
     "iopub.status.busy": "2024-06-24T15:51:33.826088Z",
     "iopub.status.idle": "2024-06-24T15:51:33.830426Z",
     "shell.execute_reply": "2024-06-24T15:51:33.829574Z"
    },
    "papermill": {
     "duration": 0.014661,
     "end_time": "2024-06-24T15:51:33.832348",
     "exception": false,
     "start_time": "2024-06-24T15:51:33.817687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_dir = \"/kaggle/input/isic-2019/ISIC_2019_Training_Input/ISIC_2019_Training_Input\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "918037e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:33.847412Z",
     "iopub.status.busy": "2024-06-24T15:51:33.847102Z",
     "iopub.status.idle": "2024-06-24T15:51:33.854315Z",
     "shell.execute_reply": "2024-06-24T15:51:33.853638Z"
    },
    "papermill": {
     "duration": 0.01679,
     "end_time": "2024-06-24T15:51:33.856132",
     "exception": false,
     "start_time": "2024-06-24T15:51:33.839342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"UNK\", \"lesion_id\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "98847703",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:33.870973Z",
     "iopub.status.busy": "2024-06-24T15:51:33.870698Z",
     "iopub.status.idle": "2024-06-24T15:51:33.896722Z",
     "shell.execute_reply": "2024-06-24T15:51:33.895731Z"
    },
    "papermill": {
     "duration": 0.035794,
     "end_time": "2024-06-24T15:51:33.898699",
     "exception": false,
     "start_time": "2024-06-24T15:51:33.862905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25256</th>\n",
       "      <td>ISIC_0073141</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "25256  ISIC_0073141  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        45.0   \n",
       "\n",
       "      anatom_site_general     sex  \n",
       "25256      anterior torso  female  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"image\"] == \"ISIC_0073141\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8562299d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:33.914323Z",
     "iopub.status.busy": "2024-06-24T15:51:33.914068Z",
     "iopub.status.idle": "2024-06-24T15:51:33.939514Z",
     "shell.execute_reply": "2024-06-24T15:51:33.938663Z"
    },
    "papermill": {
     "duration": 0.035556,
     "end_time": "2024-06-24T15:51:33.941713",
     "exception": false,
     "start_time": "2024-06-24T15:51:33.906157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>posterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25326</th>\n",
       "      <td>ISIC_0073247</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>head/neck</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25327</th>\n",
       "      <td>ISIC_0073248</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25328</th>\n",
       "      <td>ISIC_0073249</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>lower extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25329</th>\n",
       "      <td>ISIC_0073251</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>palms/soles</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25330</th>\n",
       "      <td>ISIC_0073254</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25331 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0      ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1      ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2      ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3      ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4      ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "...             ...  ...  ...  ...  ...  ...  ...   ...  ...         ...   \n",
       "25326  ISIC_0073247  0.0  0.0  1.0  0.0  0.0  0.0   0.0  0.0        85.0   \n",
       "25327  ISIC_0073248  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0        65.0   \n",
       "25328  ISIC_0073249  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        70.0   \n",
       "25329  ISIC_0073251  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "25330  ISIC_0073254  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0        50.0   \n",
       "\n",
       "      anatom_site_general     sex  \n",
       "0          anterior torso  female  \n",
       "1          anterior torso  female  \n",
       "2         upper extremity  female  \n",
       "3         upper extremity    male  \n",
       "4         posterior torso    male  \n",
       "...                   ...     ...  \n",
       "25326           head/neck  female  \n",
       "25327      anterior torso    male  \n",
       "25328     lower extremity    male  \n",
       "25329         palms/soles  female  \n",
       "25330     upper extremity    male  \n",
       "\n",
       "[25331 rows x 12 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1711fcda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:33.958618Z",
     "iopub.status.busy": "2024-06-24T15:51:33.958305Z",
     "iopub.status.idle": "2024-06-24T15:51:33.965208Z",
     "shell.execute_reply": "2024-06-24T15:51:33.964379Z"
    },
    "papermill": {
     "duration": 0.017324,
     "end_time": "2024-06-24T15:51:33.967210",
     "exception": false,
     "start_time": "2024-06-24T15:51:33.949886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['anterior torso', 'upper extremity', 'posterior torso',\n",
       "       'lower extremity', nan, 'lateral torso', 'head/neck',\n",
       "       'palms/soles', 'oral/genital'], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"anatom_site_general\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bf7c6782",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:33.983793Z",
     "iopub.status.busy": "2024-06-24T15:51:33.983509Z",
     "iopub.status.idle": "2024-06-24T15:51:33.993194Z",
     "shell.execute_reply": "2024-06-24T15:51:33.992154Z"
    },
    "papermill": {
     "duration": 0.020707,
     "end_time": "2024-06-24T15:51:33.995724",
     "exception": false,
     "start_time": "2024-06-24T15:51:33.975017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/290600658.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['age_approx'].fillna(median_age, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "median_age = df['age_approx'].median()\n",
    "df['age_approx'].fillna(median_age, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "74ffac06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:34.013599Z",
     "iopub.status.busy": "2024-06-24T15:51:34.013302Z",
     "iopub.status.idle": "2024-06-24T15:51:34.027584Z",
     "shell.execute_reply": "2024-06-24T15:51:34.026821Z"
    },
    "papermill": {
     "duration": 0.025806,
     "end_time": "2024-06-24T15:51:34.029503",
     "exception": false,
     "start_time": "2024-06-24T15:51:34.003697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cd4302a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:34.048074Z",
     "iopub.status.busy": "2024-06-24T15:51:34.047358Z",
     "iopub.status.idle": "2024-06-24T15:51:35.075887Z",
     "shell.execute_reply": "2024-06-24T15:51:35.074916Z"
    },
    "papermill": {
     "duration": 1.039989,
     "end_time": "2024-06-24T15:51:35.078228",
     "exception": false,
     "start_time": "2024-06-24T15:51:34.038239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "one_hot = pd.get_dummies(df[[\"anatom_site_general\", \"sex\"]], drop_first=False)\n",
    "\n",
    "df = df.drop([\"anatom_site_general\", \"sex\"], axis=1)\n",
    "df = pd.concat([df, one_hot], axis=1)\n",
    "\n",
    "bool_columns = df.select_dtypes(include=['bool']).columns\n",
    "df[bool_columns] = df[bool_columns].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "19a418c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.095253Z",
     "iopub.status.busy": "2024-06-24T15:51:35.094940Z",
     "iopub.status.idle": "2024-06-24T15:51:35.125121Z",
     "shell.execute_reply": "2024-06-24T15:51:35.124247Z"
    },
    "papermill": {
     "duration": 0.040639,
     "end_time": "2024-06-24T15:51:35.127073",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.086434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_anterior torso</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_female</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2915</th>\n",
       "      <td>ISIC_0024318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2927</th>\n",
       "      <td>ISIC_0024330</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2983</th>\n",
       "      <td>ISIC_0024386</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2993</th>\n",
       "      <td>ISIC_0024396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3150</th>\n",
       "      <td>ISIC_0024553</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25145</th>\n",
       "      <td>ISIC_0072970</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25238</th>\n",
       "      <td>ISIC_0073112</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25256</th>\n",
       "      <td>ISIC_0073141</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25286</th>\n",
       "      <td>ISIC_0073189</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25287</th>\n",
       "      <td>ISIC_0073193</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>235 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "2915   ISIC_0024318  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        65.0   \n",
       "2927   ISIC_0024330  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        40.0   \n",
       "2983   ISIC_0024386  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        40.0   \n",
       "2993   ISIC_0024396  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        65.0   \n",
       "3150   ISIC_0024553  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        50.0   \n",
       "...             ...  ...  ...  ...  ...  ...  ...   ...  ...         ...   \n",
       "25145  ISIC_0072970  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        60.0   \n",
       "25238  ISIC_0073112  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        85.0   \n",
       "25256  ISIC_0073141  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        45.0   \n",
       "25286  ISIC_0073189  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        70.0   \n",
       "25287  ISIC_0073193  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        35.0   \n",
       "\n",
       "       anatom_site_general_anterior torso  anatom_site_general_head/neck  \\\n",
       "2915                                    0                              0   \n",
       "2927                                    0                              0   \n",
       "2983                                    0                              0   \n",
       "2993                                    0                              0   \n",
       "3150                                    0                              0   \n",
       "...                                   ...                            ...   \n",
       "25145                                   0                              0   \n",
       "25238                                   1                              0   \n",
       "25256                                   1                              0   \n",
       "25286                                   0                              0   \n",
       "25287                                   1                              0   \n",
       "\n",
       "       anatom_site_general_lateral torso  anatom_site_general_lower extremity  \\\n",
       "2915                                   0                                    1   \n",
       "2927                                   0                                    1   \n",
       "2983                                   0                                    1   \n",
       "2993                                   0                                    1   \n",
       "3150                                   0                                    0   \n",
       "...                                  ...                                  ...   \n",
       "25145                                  0                                    1   \n",
       "25238                                  0                                    0   \n",
       "25256                                  0                                    0   \n",
       "25286                                  0                                    0   \n",
       "25287                                  0                                    0   \n",
       "\n",
       "       anatom_site_general_oral/genital  anatom_site_general_palms/soles  \\\n",
       "2915                                  0                                0   \n",
       "2927                                  0                                0   \n",
       "2983                                  0                                0   \n",
       "2993                                  0                                0   \n",
       "3150                                  0                                0   \n",
       "...                                 ...                              ...   \n",
       "25145                                 0                                0   \n",
       "25238                                 0                                0   \n",
       "25256                                 0                                0   \n",
       "25286                                 0                                0   \n",
       "25287                                 0                                0   \n",
       "\n",
       "       anatom_site_general_posterior torso  \\\n",
       "2915                                     0   \n",
       "2927                                     0   \n",
       "2983                                     0   \n",
       "2993                                     0   \n",
       "3150                                     0   \n",
       "...                                    ...   \n",
       "25145                                    0   \n",
       "25238                                    0   \n",
       "25256                                    0   \n",
       "25286                                    0   \n",
       "25287                                    0   \n",
       "\n",
       "       anatom_site_general_upper extremity  sex_female  sex_male  \n",
       "2915                                     0           1         0  \n",
       "2927                                     0           0         1  \n",
       "2983                                     0           1         0  \n",
       "2993                                     0           1         0  \n",
       "3150                                     1           1         0  \n",
       "...                                    ...         ...       ...  \n",
       "25145                                    0           1         0  \n",
       "25238                                    0           1         0  \n",
       "25256                                    0           1         0  \n",
       "25286                                    1           0         1  \n",
       "25287                                    0           0         1  \n",
       "\n",
       "[235 rows x 20 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"DF\"] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b6845bb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.144960Z",
     "iopub.status.busy": "2024-06-24T15:51:35.144689Z",
     "iopub.status.idle": "2024-06-24T15:51:35.247536Z",
     "shell.execute_reply": "2024-06-24T15:51:35.246337Z"
    },
    "papermill": {
     "duration": 0.1138,
     "end_time": "2024-06-24T15:51:35.249577",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.135777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: 14419\n",
      "Validation set size: 3605\n",
      "Test set size: 4507\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_val_df, test_df = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "# Then, split the training+validation set into training and validation sets\n",
    "train_df, val_df = train_test_split(train_val_df, test_size=0.2, random_state=42)\n",
    "\n",
    "print(f\"Train set size: {len(train_df)}\")\n",
    "print(f\"Validation set size: {len(val_df)}\")\n",
    "print(f\"Test set size: {len(test_df)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cff526f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.268248Z",
     "iopub.status.busy": "2024-06-24T15:51:35.267926Z",
     "iopub.status.idle": "2024-06-24T15:51:35.299107Z",
     "shell.execute_reply": "2024-06-24T15:51:35.298175Z"
    },
    "papermill": {
     "duration": 0.042913,
     "end_time": "2024-06-24T15:51:35.300948",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.258035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_anterior torso</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_female</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16634</th>\n",
       "      <td>ISIC_0059427</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23936</th>\n",
       "      <td>ISIC_0071042</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11033</th>\n",
       "      <td>ISIC_0032436</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2619</th>\n",
       "      <td>ISIC_0015109_downsampled</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3629</th>\n",
       "      <td>ISIC_0025032</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22197</th>\n",
       "      <td>ISIC_0068305</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12019</th>\n",
       "      <td>ISIC_0033422</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19211</th>\n",
       "      <td>ISIC_0063568</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18928</th>\n",
       "      <td>ISIC_0063094</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16725</th>\n",
       "      <td>ISIC_0059570</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14419 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  \\\n",
       "16634              ISIC_0059427  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "23936              ISIC_0071042  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "11033              ISIC_0032436  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "2619   ISIC_0015109_downsampled  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "3629               ISIC_0025032  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0   \n",
       "...                         ...  ...  ...  ...  ...  ...  ...   ...  ...   \n",
       "22197              ISIC_0068305  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "12019              ISIC_0033422  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0   \n",
       "19211              ISIC_0063568  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "18928              ISIC_0063094  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "16725              ISIC_0059570  0.0  0.0  1.0  0.0  0.0  0.0   0.0  0.0   \n",
       "\n",
       "       age_approx  anatom_site_general_anterior torso  \\\n",
       "16634        85.0                                   0   \n",
       "23936         0.0                                   0   \n",
       "11033        50.0                                   0   \n",
       "2619         40.0                                   0   \n",
       "3629         75.0                                   0   \n",
       "...           ...                                 ...   \n",
       "22197        15.0                                   1   \n",
       "12019        45.0                                   0   \n",
       "19211        50.0                                   0   \n",
       "18928        60.0                                   1   \n",
       "16725        50.0                                   0   \n",
       "\n",
       "       anatom_site_general_head/neck  anatom_site_general_lateral torso  \\\n",
       "16634                              1                                  0   \n",
       "23936                              0                                  0   \n",
       "11033                              0                                  0   \n",
       "2619                               0                                  0   \n",
       "3629                               0                                  0   \n",
       "...                              ...                                ...   \n",
       "22197                              0                                  0   \n",
       "12019                              0                                  0   \n",
       "19211                              0                                  0   \n",
       "18928                              0                                  0   \n",
       "16725                              1                                  0   \n",
       "\n",
       "       anatom_site_general_lower extremity  anatom_site_general_oral/genital  \\\n",
       "16634                                    0                                 0   \n",
       "23936                                    0                                 0   \n",
       "11033                                    0                                 0   \n",
       "2619                                     0                                 0   \n",
       "3629                                     0                                 0   \n",
       "...                                    ...                               ...   \n",
       "22197                                    0                                 0   \n",
       "12019                                    1                                 0   \n",
       "19211                                    1                                 0   \n",
       "18928                                    0                                 0   \n",
       "16725                                    0                                 0   \n",
       "\n",
       "       anatom_site_general_palms/soles  anatom_site_general_posterior torso  \\\n",
       "16634                                0                                    0   \n",
       "23936                                1                                    0   \n",
       "11033                                0                                    1   \n",
       "2619                                 0                                    1   \n",
       "3629                                 0                                    1   \n",
       "...                                ...                                  ...   \n",
       "22197                                0                                    0   \n",
       "12019                                0                                    0   \n",
       "19211                                0                                    0   \n",
       "18928                                0                                    0   \n",
       "16725                                0                                    0   \n",
       "\n",
       "       anatom_site_general_upper extremity  sex_female  sex_male  \n",
       "16634                                    0           0         1  \n",
       "23936                                    0           1         0  \n",
       "11033                                    0           1         0  \n",
       "2619                                     0           0         1  \n",
       "3629                                     0           1         0  \n",
       "...                                    ...         ...       ...  \n",
       "22197                                    0           0         1  \n",
       "12019                                    0           0         1  \n",
       "19211                                    0           0         1  \n",
       "18928                                    0           0         1  \n",
       "16725                                    0           0         1  \n",
       "\n",
       "[14419 rows x 20 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5a6ff5bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.319851Z",
     "iopub.status.busy": "2024-06-24T15:51:35.319579Z",
     "iopub.status.idle": "2024-06-24T15:51:35.327079Z",
     "shell.execute_reply": "2024-06-24T15:51:35.326153Z"
    },
    "papermill": {
     "duration": 0.019325,
     "end_time": "2024-06-24T15:51:35.329143",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.309818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MelanomaDataset(Dataset):\n",
    "    def __init__(self, df, img_dir, transform):\n",
    "        self.img_dir = img_dir\n",
    "        self.df = df\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img_name = os.path.join(self.img_dir, self.df.iloc[idx, 0] + '.jpg')  # Assuming .jpg extension\n",
    "        image = Image.open(img_name)\n",
    "        if transform:\n",
    "            image = self.transform(image)\n",
    "        values = np.array(self.df.iloc[idx, 9:].values, dtype=np.float32)\n",
    "        \n",
    "        characteristics = torch.tensor(values, dtype=torch.float32)\n",
    "        label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n",
    "        return image, characteristics, label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0e9772c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.348353Z",
     "iopub.status.busy": "2024-06-24T15:51:35.348076Z",
     "iopub.status.idle": "2024-06-24T15:51:35.354055Z",
     "shell.execute_reply": "2024-06-24T15:51:35.353235Z"
    },
    "papermill": {
     "duration": 0.017836,
     "end_time": "2024-06-24T15:51:35.355911",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.338075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchvision.transforms as transforms\n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),  # Resize to match input size of the model\n",
    "    transforms.RandomHorizontalFlip(p=0.5),  # Randomly flip the image horizontally\n",
    "    transforms.RandomRotation(degrees=15),  # Randomly rotate the image by up to 15 degrees\n",
    "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),  # Randomly change the brightness, contrast, saturation, and hue\n",
    "    transforms.ToTensor(),          # Convert to tensor\n",
    "    transforms.Normalize(mean=[0.5], std=[0.5]),  # Normalize the tensor\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0a015938",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.374889Z",
     "iopub.status.busy": "2024-06-24T15:51:35.374631Z",
     "iopub.status.idle": "2024-06-24T15:51:35.380065Z",
     "shell.execute_reply": "2024-06-24T15:51:35.379224Z"
    },
    "papermill": {
     "duration": 0.017382,
     "end_time": "2024-06-24T15:51:35.382029",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.364647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = MelanomaDataset(train_df, images_dir, transform)\n",
    "val_dataset = MelanomaDataset(val_df, images_dir, transform)\n",
    "test_dataset = MelanomaDataset(test_df, images_dir, transform)\n",
    "\n",
    "# Create DataLoader for each dataset\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=128, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fd984714",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.400862Z",
     "iopub.status.busy": "2024-06-24T15:51:35.400605Z",
     "iopub.status.idle": "2024-06-24T15:51:35.408227Z",
     "shell.execute_reply": "2024-06-24T15:51:35.407372Z"
    },
    "papermill": {
     "duration": 0.019185,
     "end_time": "2024-06-24T15:51:35.410095",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.390910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CombinedModel(nn.Module):\n",
    "    def __init__(self, num_tabular_features):\n",
    "        super(CombinedModel, self).__init__()\n",
    "        self.cnn = models.resnet18(weights=True)\n",
    "        self.cnn.fc = nn.Identity()  # Remove the final classification layer\n",
    "        \n",
    "        self.tabular_fc1 = nn.Linear(num_tabular_features, 128)\n",
    "        self.tabular_fc2 = nn.Linear(128, 64)\n",
    "        \n",
    "        self.fc1 = nn.Linear(512 + 64, 128)  \n",
    "        self.fc2 = nn.Linear(128, 8)  \n",
    "\n",
    "    def forward(self, image, tabular_data):\n",
    "        cnn_features = self.cnn(image)\n",
    "        \n",
    "        tabular_out = nn.ReLU()(self.tabular_fc1(tabular_data))\n",
    "        tabular_out = nn.ReLU()(self.tabular_fc2(tabular_out))\n",
    "        \n",
    "        combined_features = torch.cat((cnn_features, tabular_out), dim=1)\n",
    "        x = nn.ReLU()(self.fc1(combined_features))\n",
    "        x = self.fc2(x)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a99f8eac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.428709Z",
     "iopub.status.busy": "2024-06-24T15:51:35.428434Z",
     "iopub.status.idle": "2024-06-24T15:51:35.915933Z",
     "shell.execute_reply": "2024-06-24T15:51:35.915013Z"
    },
    "papermill": {
     "duration": 0.499176,
     "end_time": "2024-06-24T15:51:35.918000",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.418824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0.0182, 0.0074, 0.0244, 0.0938, 0.0339, 0.3374, 0.3572, 0.1275],\n",
       "       device='cuda:0')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "A = np.array([df[cls].sum() for cls in df.columns[1:9]])\n",
    "\n",
    "class_weights = len(df) / A\n",
    "weights_tensor = torch.tensor(class_weights, dtype=torch.float).to(device)\n",
    "\n",
    "normalized_weights_tensor = (1/sum(weights_tensor)) * weights_tensor\n",
    "normalized_weights_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8705be05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:35.937723Z",
     "iopub.status.busy": "2024-06-24T15:51:35.937419Z",
     "iopub.status.idle": "2024-06-24T15:51:36.613025Z",
     "shell.execute_reply": "2024-06-24T15:51:36.612045Z"
    },
    "papermill": {
     "duration": 0.687922,
     "end_time": "2024-06-24T15:51:36.615272",
     "exception": false,
     "start_time": "2024-06-24T15:51:35.927350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n",
      "100%|██████████| 44.7M/44.7M [00:00<00:00, 160MB/s]\n"
     ]
    }
   ],
   "source": [
    "num_tabular_features = len(df.columns[9:])\n",
    "print(num_tabular_features)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss(weight=normalized_weights_tensor) \n",
    "model = CombinedModel(num_tabular_features).to(device)\n",
    "optimizer = optim.Adam(lr=0.001, params=model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d58c3feb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:51:36.636495Z",
     "iopub.status.busy": "2024-06-24T15:51:36.636162Z",
     "iopub.status.idle": "2024-06-24T17:06:50.540374Z",
     "shell.execute_reply": "2024-06-24T17:06:50.539451Z"
    },
    "papermill": {
     "duration": 4513.931037,
     "end_time": "2024-06-24T17:06:50.556407",
     "exception": false,
     "start_time": "2024-06-24T15:51:36.625370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/10], Step [0], Loss: 0.0651\n",
      "Epoch [1/10], Step [50], Loss: 0.0559\n",
      "Epoch [1/10], Step [100], Loss: 0.0507\n",
      "Epoch [1/10], Average Training Loss: 0.0498\n",
      "Epoch [1/10], Validation Loss: 0.0463, Validation Accuracy: 43.19%\n",
      "Epoch [2/10], Step [0], Loss: 0.0525\n",
      "Epoch [2/10], Step [50], Loss: 0.0304\n",
      "Epoch [2/10], Step [100], Loss: 0.0398\n",
      "Epoch [2/10], Average Training Loss: 0.0464\n",
      "Epoch [2/10], Validation Loss: 0.0489, Validation Accuracy: 43.80%\n",
      "Epoch [3/10], Step [0], Loss: 0.0344\n",
      "Epoch [3/10], Step [50], Loss: 0.0535\n",
      "Epoch [3/10], Step [100], Loss: 0.0513\n",
      "Epoch [3/10], Average Training Loss: 0.0423\n",
      "Epoch [3/10], Validation Loss: 0.0478, Validation Accuracy: 43.66%\n",
      "Epoch [4/10], Step [0], Loss: 0.0415\n",
      "Epoch [4/10], Step [50], Loss: 0.0520\n",
      "Epoch [4/10], Step [100], Loss: 0.0442\n",
      "Epoch [4/10], Average Training Loss: 0.0414\n",
      "Epoch [4/10], Validation Loss: 0.0468, Validation Accuracy: 51.87%\n",
      "Epoch [5/10], Step [0], Loss: 0.0316\n",
      "Epoch [5/10], Step [50], Loss: 0.0351\n",
      "Epoch [5/10], Step [100], Loss: 0.0349\n",
      "Epoch [5/10], Average Training Loss: 0.0406\n",
      "Epoch [5/10], Validation Loss: 0.0431, Validation Accuracy: 46.69%\n",
      "Epoch [6/10], Step [0], Loss: 0.0339\n",
      "Epoch [6/10], Step [50], Loss: 0.0484\n",
      "Epoch [6/10], Step [100], Loss: 0.0313\n",
      "Epoch [6/10], Average Training Loss: 0.0389\n",
      "Epoch [6/10], Validation Loss: 0.0417, Validation Accuracy: 39.22%\n",
      "Epoch [7/10], Step [0], Loss: 0.0358\n",
      "Epoch [7/10], Step [50], Loss: 0.0271\n",
      "Epoch [7/10], Step [100], Loss: 0.0314\n",
      "Epoch [7/10], Average Training Loss: 0.0371\n",
      "Epoch [7/10], Validation Loss: 0.0430, Validation Accuracy: 36.45%\n",
      "Epoch [8/10], Step [0], Loss: 0.0439\n",
      "Epoch [8/10], Step [50], Loss: 0.0448\n",
      "Epoch [8/10], Step [100], Loss: 0.0271\n",
      "Epoch [8/10], Average Training Loss: 0.0358\n",
      "Epoch [8/10], Validation Loss: 0.0401, Validation Accuracy: 47.02%\n",
      "Epoch [9/10], Step [0], Loss: 0.0339\n",
      "Epoch [9/10], Step [50], Loss: 0.0324\n",
      "Epoch [9/10], Step [100], Loss: 0.0347\n",
      "Epoch [9/10], Average Training Loss: 0.0338\n",
      "Epoch [9/10], Validation Loss: 0.0437, Validation Accuracy: 44.60%\n",
      "Epoch [10/10], Step [0], Loss: 0.0320\n",
      "Epoch [10/10], Step [50], Loss: 0.0258\n",
      "Epoch [10/10], Step [100], Loss: 0.0457\n",
      "Epoch [10/10], Average Training Loss: 0.0336\n",
      "Epoch [10/10], Validation Loss: 0.0400, Validation Accuracy: 46.35%\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 10\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for batch_idx, (images, tabular_data, labels) in enumerate(train_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images, tabular_data)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        if batch_idx % 50 == 0:\n",
    "            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}], Loss: {loss.item():.4f}')\n",
    "    \n",
    "    avg_train_loss = running_loss / len(train_loader)\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Average Training Loss: {avg_train_loss:.4f}')\n",
    "    \n",
    "    # Validation loop\n",
    "    model.eval()\n",
    "    val_running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (images, tabular_data, labels) in enumerate(val_loader):\n",
    "            images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "            outputs = model(images, tabular_data)\n",
    "            val_loss = criterion(outputs, labels)\n",
    "            val_running_loss += val_loss.item()\n",
    "\n",
    "            # Convert one-hot encoded ground truth labels to class indices\n",
    "            true_labels = torch.argmax(labels, dim=1)\n",
    "\n",
    "            # Get the predicted class indices\n",
    "            predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted_labels == true_labels).sum().item()\n",
    "    \n",
    "    avg_val_loss = val_running_loss / len(val_loader)\n",
    "    val_accuracy = 100 * correct / total\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Validation Loss: {avg_val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "da21686b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T17:06:50.585181Z",
     "iopub.status.busy": "2024-06-24T17:06:50.584872Z",
     "iopub.status.idle": "2024-06-24T17:10:31.146730Z",
     "shell.execute_reply": "2024-06-24T17:10:31.145746Z"
    },
    "papermill": {
     "duration": 220.592704,
     "end_time": "2024-06-24T17:10:31.162924",
     "exception": false,
     "start_time": "2024-06-24T17:06:50.570220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 0.0402, Test Accuracy: 47.44%\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         MEL       0.45      0.48      0.46       848\n",
      "          NV       0.90      0.48      0.63      2172\n",
      "         BCC       0.37      0.65      0.47       654\n",
      "          AK       0.37      0.21      0.27       173\n",
      "         BKL       0.38      0.30      0.33       444\n",
      "          DF       0.10      0.55      0.16        47\n",
      "        VASC       0.10      0.83      0.17        41\n",
      "         SCC       0.17      0.31      0.22       128\n",
      "\n",
      "    accuracy                           0.47      4507\n",
      "   macro avg       0.35      0.48      0.34      4507\n",
      "weighted avg       0.63      0.47      0.51      4507\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "model.eval()\n",
    "test_running_loss = 0.0\n",
    "correct = 0\n",
    "total = 0\n",
    "all_true_labels = []\n",
    "all_predicted_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for idx, (images, tabular_data, labels) in enumerate(test_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        outputs = model(images, tabular_data)\n",
    "        test_loss = criterion(outputs, labels)\n",
    "        test_running_loss += test_loss.item()\n",
    "\n",
    "        true_labels = torch.argmax(labels, dim=1)\n",
    "        predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "        all_true_labels.extend(true_labels.cpu().numpy())\n",
    "        all_predicted_labels.extend(predicted_labels.cpu().numpy())\n",
    "\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted_labels == true_labels).sum().item()\n",
    "\n",
    "avg_test_loss = test_running_loss / len(test_loader)\n",
    "test_accuracy = 100 * correct / total\n",
    "print(f'Test Loss: {avg_test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%')\n",
    "\n",
    "# Generate classification report\n",
    "class_names = ['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']\n",
    "report = classification_report(all_true_labels, all_predicted_labels, target_names=class_names)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "22d50199",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T17:10:31.191297Z",
     "iopub.status.busy": "2024-06-24T17:10:31.191012Z",
     "iopub.status.idle": "2024-06-24T17:10:31.788898Z",
     "shell.execute_reply": "2024-06-24T17:10:31.787978Z"
    },
    "papermill": {
     "duration": 0.614968,
     "end_time": "2024-06-24T17:10:31.791426",
     "exception": false,
     "start_time": "2024-06-24T17:10:31.176458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm = confusion_matrix(all_true_labels, all_predicted_labels)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4ac10977",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T17:10:31.822080Z",
     "iopub.status.busy": "2024-06-24T17:10:31.821768Z",
     "iopub.status.idle": "2024-06-24T17:10:31.828086Z",
     "shell.execute_reply": "2024-06-24T17:10:31.827252Z"
    },
    "papermill": {
     "duration": 0.02369,
     "end_time": "2024-06-24T17:10:31.829937",
     "exception": false,
     "start_time": "2024-06-24T17:10:31.806247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #Test set on image input (64*64*3 with weights frequency_based and batch size 128): 67.34%\n",
    "# Test Loss: 1.3568, Test Accuracy: 69.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.57      0.59      0.58       870\n",
    "#           NV       0.81      0.87      0.84      2127\n",
    "#          BCC       0.60      0.82      0.69       664\n",
    "#           AK       0.54      0.23      0.32       186\n",
    "#          BKL       0.54      0.24      0.33       458\n",
    "#           DF       0.86      0.12      0.21        50\n",
    "#         VASC       0.41      0.69      0.51        32\n",
    "#          SCC       0.34      0.24      0.28       120\n",
    "\n",
    "#     accuracy                           0.69      4507\n",
    "#    macro avg       0.58      0.48      0.47      4507\n",
    "# weighted avg       0.68      0.69      0.67      4507\n",
    "\n",
    "# #Test set on image input (256*256*3 with weights proportionaly-inverse, normalized and batch size 128):\n",
    "# Test Loss: 0.0378, Test Accuracy: 54.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.58      0.41      0.48       870\n",
    "#           NV       0.91      0.61      0.73      2127\n",
    "#          BCC       0.63      0.53      0.58       664\n",
    "#           AK       0.23      0.66      0.34       186\n",
    "#          BKL       0.25      0.47      0.33       458\n",
    "#           DF       0.20      0.50      0.28        50\n",
    "#         VASC       0.19      0.91      0.31        32\n",
    "#          SCC       0.19      0.34      0.24       120\n",
    "\n",
    "#     accuracy                           0.54      4507\n",
    "#    macro avg       0.40      0.55      0.41      4507\n",
    "# weighted avg       0.68      0.54      0.58      4507\n",
    "\n",
    "\n",
    "# #Test set on image input (256*256*3 with no weights and batch size 128): \n",
    "# Test Loss: 1.4176, Test Accuracy: 70.42%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.67      0.50      0.57       870\n",
    "#           NV       0.74      0.94      0.83      2127\n",
    "#          BCC       0.69      0.77      0.73       664\n",
    "#           AK       0.42      0.32      0.36       186\n",
    "#          BKL       0.66      0.27      0.38       458\n",
    "#           DF       0.62      0.10      0.17        50\n",
    "#         VASC       0.68      0.72      0.70        32\n",
    "#          SCC       0.44      0.19      0.27       120\n",
    "\n",
    "#     accuracy                           0.70      4507\n",
    "#    macro avg       0.62      0.47      0.50      4507\n",
    "# weighted avg       0.69      0.70      0.68      4507\n",
    "\n",
    "\n",
    "# 16*16:\n",
    "#     Test Loss: 0.9945, Test Accuracy: 65.14%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.59      0.48      0.53       870\n",
    "#           NV       0.78      0.90      0.83      2127\n",
    "#          BCC       0.61      0.53      0.57       664\n",
    "#           AK       0.23      0.28      0.26       186\n",
    "#          BKL       0.45      0.35      0.40       458\n",
    "#           DF       0.50      0.04      0.07        50\n",
    "#         VASC       0.83      0.31      0.45        32\n",
    "#          SCC       0.17      0.23      0.20       120\n",
    "\n",
    "#     accuracy                           0.65      4507\n",
    "#    macro avg       0.52      0.39      0.41      4507\n",
    "# weighted avg       0.64      0.65      0.64      4507\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "830693a2",
   "metadata": {
    "papermill": {
     "duration": 0.014524,
     "end_time": "2024-06-24T17:10:31.858738",
     "exception": false,
     "start_time": "2024-06-24T17:10:31.844214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a21aaf8",
   "metadata": {
    "papermill": {
     "duration": 0.014445,
     "end_time": "2024-06-24T17:10:31.887374",
     "exception": false,
     "start_time": "2024-06-24T17:10:31.872929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 679322,
     "sourceId": 1193409,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4748.890489,
   "end_time": "2024-06-24T17:10:33.639887",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-24T15:51:24.749398",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
