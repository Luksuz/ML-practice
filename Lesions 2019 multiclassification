{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b74d19b2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-24T14:18:54.985635Z",
     "iopub.status.busy": "2024-06-24T14:18:54.984807Z",
     "iopub.status.idle": "2024-06-24T14:19:00.967854Z",
     "shell.execute_reply": "2024-06-24T14:19:00.966964Z"
    },
    "papermill": {
     "duration": 5.994502,
     "end_time": "2024-06-24T14:19:00.970274",
     "exception": false,
     "start_time": "2024-06-24T14:18:54.975772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import models, transforms\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from PIL import Image\n",
    "import torch\n",
    "import os\n",
    "import pandas as pd\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "04aead9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:00.986630Z",
     "iopub.status.busy": "2024-06-24T14:19:00.986187Z",
     "iopub.status.idle": "2024-06-24T14:19:01.133843Z",
     "shell.execute_reply": "2024-06-24T14:19:01.132863Z"
    },
    "papermill": {
     "duration": 0.158368,
     "end_time": "2024-06-24T14:19:01.136210",
     "exception": false,
     "start_time": "2024-06-24T14:19:00.977842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_ground_truth = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_GroundTruth.csv\")\n",
    "df_metadata = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_Metadata.csv\")\n",
    "df = pd.merge(df_ground_truth, df_metadata, on='image', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7feab2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:01.150932Z",
     "iopub.status.busy": "2024-06-24T14:19:01.150646Z",
     "iopub.status.idle": "2024-06-24T14:19:01.154629Z",
     "shell.execute_reply": "2024-06-24T14:19:01.153759Z"
    },
    "papermill": {
     "duration": 0.013553,
     "end_time": "2024-06-24T14:19:01.156673",
     "exception": false,
     "start_time": "2024-06-24T14:19:01.143120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_dir = \"/kaggle/input/isic-2019/ISIC_2019_Training_Input/ISIC_2019_Training_Input\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "808f6b06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:01.170940Z",
     "iopub.status.busy": "2024-06-24T14:19:01.170698Z",
     "iopub.status.idle": "2024-06-24T14:19:01.177374Z",
     "shell.execute_reply": "2024-06-24T14:19:01.176627Z"
    },
    "papermill": {
     "duration": 0.016021,
     "end_time": "2024-06-24T14:19:01.179350",
     "exception": false,
     "start_time": "2024-06-24T14:19:01.163329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"UNK\", \"lesion_id\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8d09f706",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:01.194130Z",
     "iopub.status.busy": "2024-06-24T14:19:01.193876Z",
     "iopub.status.idle": "2024-06-24T14:19:01.218000Z",
     "shell.execute_reply": "2024-06-24T14:19:01.217102Z"
    },
    "papermill": {
     "duration": 0.033549,
     "end_time": "2024-06-24T14:19:01.219973",
     "exception": false,
     "start_time": "2024-06-24T14:19:01.186424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>posterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "  anatom_site_general     sex  \n",
       "0      anterior torso  female  \n",
       "1      anterior torso  female  \n",
       "2     upper extremity  female  \n",
       "3     upper extremity    male  \n",
       "4     posterior torso    male  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3336dfee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:01.235096Z",
     "iopub.status.busy": "2024-06-24T14:19:01.234804Z",
     "iopub.status.idle": "2024-06-24T14:19:01.261028Z",
     "shell.execute_reply": "2024-06-24T14:19:01.260034Z"
    },
    "papermill": {
     "duration": 0.036104,
     "end_time": "2024-06-24T14:19:01.263086",
     "exception": false,
     "start_time": "2024-06-24T14:19:01.226982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25331 entries, 0 to 25330\n",
      "Data columns (total 12 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   image                25331 non-null  object \n",
      " 1   MEL                  25331 non-null  float64\n",
      " 2   NV                   25331 non-null  float64\n",
      " 3   BCC                  25331 non-null  float64\n",
      " 4   AK                   25331 non-null  float64\n",
      " 5   BKL                  25331 non-null  float64\n",
      " 6   DF                   25331 non-null  float64\n",
      " 7   VASC                 25331 non-null  float64\n",
      " 8   SCC                  25331 non-null  float64\n",
      " 9   age_approx           24894 non-null  float64\n",
      " 10  anatom_site_general  22700 non-null  object \n",
      " 11  sex                  24947 non-null  object \n",
      "dtypes: float64(9), object(3)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0f1ffecb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:01.278738Z",
     "iopub.status.busy": "2024-06-24T14:19:01.278453Z",
     "iopub.status.idle": "2024-06-24T14:19:01.285897Z",
     "shell.execute_reply": "2024-06-24T14:19:01.284864Z"
    },
    "papermill": {
     "duration": 0.017683,
     "end_time": "2024-06-24T14:19:01.288102",
     "exception": false,
     "start_time": "2024-06-24T14:19:01.270419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/290600658.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['age_approx'].fillna(median_age, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "median_age = df['age_approx'].median()\n",
    "df['age_approx'].fillna(median_age, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "650e74ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:01.305299Z",
     "iopub.status.busy": "2024-06-24T14:19:01.304989Z",
     "iopub.status.idle": "2024-06-24T14:19:01.319930Z",
     "shell.execute_reply": "2024-06-24T14:19:01.319230Z"
    },
    "papermill": {
     "duration": 0.025466,
     "end_time": "2024-06-24T14:19:01.321912",
     "exception": false,
     "start_time": "2024-06-24T14:19:01.296446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "946bb631",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:01.337815Z",
     "iopub.status.busy": "2024-06-24T14:19:01.337549Z",
     "iopub.status.idle": "2024-06-24T14:19:02.274259Z",
     "shell.execute_reply": "2024-06-24T14:19:02.273443Z"
    },
    "papermill": {
     "duration": 0.94735,
     "end_time": "2024-06-24T14:19:02.276730",
     "exception": false,
     "start_time": "2024-06-24T14:19:01.329380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "one_hot = pd.get_dummies(df[[\"anatom_site_general\", \"sex\"]], drop_first=True)\n",
    "\n",
    "df = df.drop([\"anatom_site_general\", \"sex\"], axis=1)\n",
    "df = pd.concat([df, one_hot], axis=1)\n",
    "\n",
    "bool_columns = df.select_dtypes(include=['bool']).columns\n",
    "df[bool_columns] = df[bool_columns].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b19556a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.294161Z",
     "iopub.status.busy": "2024-06-24T14:19:02.293891Z",
     "iopub.status.idle": "2024-06-24T14:19:02.316541Z",
     "shell.execute_reply": "2024-06-24T14:19:02.315601Z"
    },
    "papermill": {
     "duration": 0.033293,
     "end_time": "2024-06-24T14:19:02.318685",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.285392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "   anatom_site_general_head/neck  anatom_site_general_lateral torso  \\\n",
       "0                              0                                  0   \n",
       "1                              0                                  0   \n",
       "2                              0                                  0   \n",
       "3                              0                                  0   \n",
       "4                              0                                  0   \n",
       "\n",
       "   anatom_site_general_lower extremity  anatom_site_general_oral/genital  \\\n",
       "0                                    0                                 0   \n",
       "1                                    0                                 0   \n",
       "2                                    0                                 0   \n",
       "3                                    0                                 0   \n",
       "4                                    0                                 0   \n",
       "\n",
       "   anatom_site_general_palms/soles  anatom_site_general_posterior torso  \\\n",
       "0                                0                                    0   \n",
       "1                                0                                    0   \n",
       "2                                0                                    0   \n",
       "3                                0                                    0   \n",
       "4                                0                                    1   \n",
       "\n",
       "   anatom_site_general_upper extremity  sex_male  \n",
       "0                                    0         0  \n",
       "1                                    0         0  \n",
       "2                                    1         0  \n",
       "3                                    1         1  \n",
       "4                                    0         1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2a4fdcce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.336450Z",
     "iopub.status.busy": "2024-06-24T14:19:02.335827Z",
     "iopub.status.idle": "2024-06-24T14:19:02.429281Z",
     "shell.execute_reply": "2024-06-24T14:19:02.428409Z"
    },
    "papermill": {
     "duration": 0.104064,
     "end_time": "2024-06-24T14:19:02.431338",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.327274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: 14419\n",
      "Validation set size: 3605\n",
      "Test set size: 4507\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_val_df, test_df = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "# Then, split the training+validation set into training and validation sets\n",
    "train_df, val_df = train_test_split(train_val_df, test_size=0.2, random_state=42)\n",
    "\n",
    "print(f\"Train set size: {len(train_df)}\")\n",
    "print(f\"Validation set size: {len(val_df)}\")\n",
    "print(f\"Test set size: {len(test_df)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3a1e12cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.448547Z",
     "iopub.status.busy": "2024-06-24T14:19:02.447851Z",
     "iopub.status.idle": "2024-06-24T14:19:02.475960Z",
     "shell.execute_reply": "2024-06-24T14:19:02.475082Z"
    },
    "papermill": {
     "duration": 0.038633,
     "end_time": "2024-06-24T14:19:02.477808",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.439175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16634</th>\n",
       "      <td>ISIC_0059427</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23936</th>\n",
       "      <td>ISIC_0071042</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11033</th>\n",
       "      <td>ISIC_0032436</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2619</th>\n",
       "      <td>ISIC_0015109_downsampled</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3629</th>\n",
       "      <td>ISIC_0025032</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22197</th>\n",
       "      <td>ISIC_0068305</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12019</th>\n",
       "      <td>ISIC_0033422</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19211</th>\n",
       "      <td>ISIC_0063568</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18928</th>\n",
       "      <td>ISIC_0063094</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16725</th>\n",
       "      <td>ISIC_0059570</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14419 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  \\\n",
       "16634              ISIC_0059427  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "23936              ISIC_0071042  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "11033              ISIC_0032436  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "2619   ISIC_0015109_downsampled  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "3629               ISIC_0025032  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0   \n",
       "...                         ...  ...  ...  ...  ...  ...  ...   ...  ...   \n",
       "22197              ISIC_0068305  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "12019              ISIC_0033422  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0   \n",
       "19211              ISIC_0063568  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "18928              ISIC_0063094  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "16725              ISIC_0059570  0.0  0.0  1.0  0.0  0.0  0.0   0.0  0.0   \n",
       "\n",
       "       age_approx  anatom_site_general_head/neck  \\\n",
       "16634        85.0                              1   \n",
       "23936         0.0                              0   \n",
       "11033        50.0                              0   \n",
       "2619         40.0                              0   \n",
       "3629         75.0                              0   \n",
       "...           ...                            ...   \n",
       "22197        15.0                              0   \n",
       "12019        45.0                              0   \n",
       "19211        50.0                              0   \n",
       "18928        60.0                              0   \n",
       "16725        50.0                              1   \n",
       "\n",
       "       anatom_site_general_lateral torso  anatom_site_general_lower extremity  \\\n",
       "16634                                  0                                    0   \n",
       "23936                                  0                                    0   \n",
       "11033                                  0                                    0   \n",
       "2619                                   0                                    0   \n",
       "3629                                   0                                    0   \n",
       "...                                  ...                                  ...   \n",
       "22197                                  0                                    0   \n",
       "12019                                  0                                    1   \n",
       "19211                                  0                                    1   \n",
       "18928                                  0                                    0   \n",
       "16725                                  0                                    0   \n",
       "\n",
       "       anatom_site_general_oral/genital  anatom_site_general_palms/soles  \\\n",
       "16634                                 0                                0   \n",
       "23936                                 0                                1   \n",
       "11033                                 0                                0   \n",
       "2619                                  0                                0   \n",
       "3629                                  0                                0   \n",
       "...                                 ...                              ...   \n",
       "22197                                 0                                0   \n",
       "12019                                 0                                0   \n",
       "19211                                 0                                0   \n",
       "18928                                 0                                0   \n",
       "16725                                 0                                0   \n",
       "\n",
       "       anatom_site_general_posterior torso  \\\n",
       "16634                                    0   \n",
       "23936                                    0   \n",
       "11033                                    1   \n",
       "2619                                     1   \n",
       "3629                                     1   \n",
       "...                                    ...   \n",
       "22197                                    0   \n",
       "12019                                    0   \n",
       "19211                                    0   \n",
       "18928                                    0   \n",
       "16725                                    0   \n",
       "\n",
       "       anatom_site_general_upper extremity  sex_male  \n",
       "16634                                    0         1  \n",
       "23936                                    0         0  \n",
       "11033                                    0         0  \n",
       "2619                                     0         1  \n",
       "3629                                     0         0  \n",
       "...                                    ...       ...  \n",
       "22197                                    0         1  \n",
       "12019                                    0         1  \n",
       "19211                                    0         1  \n",
       "18928                                    0         1  \n",
       "16725                                    0         1  \n",
       "\n",
       "[14419 rows x 18 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a87bb646",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.496182Z",
     "iopub.status.busy": "2024-06-24T14:19:02.495869Z",
     "iopub.status.idle": "2024-06-24T14:19:02.503313Z",
     "shell.execute_reply": "2024-06-24T14:19:02.502463Z"
    },
    "papermill": {
     "duration": 0.019053,
     "end_time": "2024-06-24T14:19:02.505224",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.486171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MelanomaDataset(Dataset):\n",
    "    def __init__(self, df, img_dir, transform):\n",
    "        self.img_dir = img_dir\n",
    "        self.df = df\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img_name = os.path.join(self.img_dir, self.df.iloc[idx, 0] + '.jpg')  # Assuming .jpg extension\n",
    "        image = Image.open(img_name)\n",
    "        if transform:\n",
    "            image = self.transform(image)\n",
    "        values = np.array(self.df.iloc[idx, 9:].values, dtype=np.float32)\n",
    "        \n",
    "        characteristics = torch.tensor(values, dtype=torch.float32)\n",
    "        label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n",
    "        return image, characteristics, label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c8e64e5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.522478Z",
     "iopub.status.busy": "2024-06-24T14:19:02.522186Z",
     "iopub.status.idle": "2024-06-24T14:19:02.528359Z",
     "shell.execute_reply": "2024-06-24T14:19:02.527534Z"
    },
    "papermill": {
     "duration": 0.016802,
     "end_time": "2024-06-24T14:19:02.530108",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.513306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchvision.transforms as transforms\n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),  # Resize to match input size of the model\n",
    "    transforms.RandomHorizontalFlip(p=0.5),  # Randomly flip the image horizontally\n",
    "    transforms.RandomRotation(degrees=15),  # Randomly rotate the image by up to 15 degrees\n",
    "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),  # Randomly change the brightness, contrast, saturation, and hue\n",
    "    transforms.RandomResizedCrop(size=(224, 224), scale=(0.8, 1.0)),  # Randomly crop the image\n",
    "    transforms.ToTensor(),          # Convert to tensor\n",
    "    transforms.Normalize(mean=[0.5], std=[0.5]),  # Normalize the tensor\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb7e3f5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.547107Z",
     "iopub.status.busy": "2024-06-24T14:19:02.546863Z",
     "iopub.status.idle": "2024-06-24T14:19:02.552366Z",
     "shell.execute_reply": "2024-06-24T14:19:02.551557Z"
    },
    "papermill": {
     "duration": 0.016077,
     "end_time": "2024-06-24T14:19:02.554219",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.538142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = MelanomaDataset(train_df, images_dir, transform)\n",
    "val_dataset = MelanomaDataset(val_df, images_dir, transform)\n",
    "test_dataset = MelanomaDataset(test_df, images_dir, transform)\n",
    "\n",
    "# Create DataLoader for each dataset\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=128, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2a50e3ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.571807Z",
     "iopub.status.busy": "2024-06-24T14:19:02.571556Z",
     "iopub.status.idle": "2024-06-24T14:19:02.579941Z",
     "shell.execute_reply": "2024-06-24T14:19:02.579265Z"
    },
    "papermill": {
     "duration": 0.019639,
     "end_time": "2024-06-24T14:19:02.581810",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.562171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CombinedModel(nn.Module):\n",
    "    def __init__(self, num_tabular_features):\n",
    "        super(CombinedModel, self).__init__()\n",
    "        self.cnn = models.resnet18(weights=True)\n",
    "        self.cnn.fc = nn.Identity()  # Remove the final classification layer\n",
    "        \n",
    "        self.tabular_fc1 = nn.Linear(num_tabular_features, 128)\n",
    "        self.tabular_fc2 = nn.Linear(128, 64)\n",
    "        \n",
    "        self.fc1 = nn.Linear(512 + 64, 128)  \n",
    "        self.fc2 = nn.Linear(128, 8)  \n",
    "\n",
    "    def forward(self, image, tabular_data):\n",
    "        cnn_features = self.cnn(image)\n",
    "        \n",
    "        tabular_out = nn.ReLU()(self.tabular_fc1(tabular_data))\n",
    "        tabular_out = nn.ReLU()(self.tabular_fc2(tabular_out))\n",
    "        \n",
    "        combined_features = torch.cat((cnn_features, tabular_out), dim=1)\n",
    "        x = nn.ReLU()(self.fc1(combined_features))\n",
    "        x = self.fc2(x)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "85d414f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:02.598992Z",
     "iopub.status.busy": "2024-06-24T14:19:02.598753Z",
     "iopub.status.idle": "2024-06-24T14:19:03.063144Z",
     "shell.execute_reply": "2024-06-24T14:19:03.062246Z"
    },
    "papermill": {
     "duration": 0.475335,
     "end_time": "2024-06-24T14:19:03.065358",
     "exception": false,
     "start_time": "2024-06-24T14:19:02.590023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0.0182, 0.0074, 0.0244, 0.0938, 0.0339, 0.3374, 0.3572, 0.1275],\n",
       "       device='cuda:0')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "A = np.array([df[cls].sum() for cls in df.columns[1:9]])\n",
    "\n",
    "class_weights = len(df) / A\n",
    "weights_tensor = torch.tensor(class_weights, dtype=torch.float).to(device)\n",
    "\n",
    "normalized_weights_tensor = (1/sum(weights_tensor)) * weights_tensor\n",
    "normalized_weights_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "94b7fa1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:03.083831Z",
     "iopub.status.busy": "2024-06-24T14:19:03.083085Z",
     "iopub.status.idle": "2024-06-24T14:19:03.719781Z",
     "shell.execute_reply": "2024-06-24T14:19:03.718959Z"
    },
    "papermill": {
     "duration": 0.648442,
     "end_time": "2024-06-24T14:19:03.722154",
     "exception": false,
     "start_time": "2024-06-24T14:19:03.073712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n",
      "100%|██████████| 44.7M/44.7M [00:00<00:00, 169MB/s]\n"
     ]
    }
   ],
   "source": [
    "num_tabular_features = len(df.columns[9:])\n",
    "print(num_tabular_features)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()# weight=normalized_weights_tensor) \n",
    "model = CombinedModel(num_tabular_features).to(device)\n",
    "optimizer = optim.Adam(lr=0.001, params=model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ae0d1fd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T14:19:03.742051Z",
     "iopub.status.busy": "2024-06-24T14:19:03.741758Z",
     "iopub.status.idle": "2024-06-24T15:31:57.460587Z",
     "shell.execute_reply": "2024-06-24T15:31:57.459540Z"
    },
    "papermill": {
     "duration": 4373.743729,
     "end_time": "2024-06-24T15:31:57.475369",
     "exception": false,
     "start_time": "2024-06-24T14:19:03.731640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/10], Step [0], Loss: 2.2347\n",
      "Epoch [1/10], Step [50], Loss: 1.2020\n",
      "Epoch [1/10], Step [100], Loss: 1.0523\n",
      "Epoch [1/10], Average Training Loss: 1.0795\n",
      "Epoch [1/10], Validation Loss: 0.9719, Validation Accuracy: 65.88%\n",
      "Epoch [2/10], Step [0], Loss: 0.9892\n",
      "Epoch [2/10], Step [50], Loss: 1.0405\n",
      "Epoch [2/10], Step [100], Loss: 0.9807\n",
      "Epoch [2/10], Average Training Loss: 0.9553\n",
      "Epoch [2/10], Validation Loss: 0.9379, Validation Accuracy: 66.46%\n",
      "Epoch [3/10], Step [0], Loss: 0.7763\n",
      "Epoch [3/10], Step [50], Loss: 1.1517\n",
      "Epoch [3/10], Step [100], Loss: 0.9882\n",
      "Epoch [3/10], Average Training Loss: 0.8912\n",
      "Epoch [3/10], Validation Loss: 0.9779, Validation Accuracy: 66.21%\n",
      "Epoch [4/10], Step [0], Loss: 0.8609\n",
      "Epoch [4/10], Step [50], Loss: 0.9484\n",
      "Epoch [4/10], Step [100], Loss: 0.8554\n",
      "Epoch [4/10], Average Training Loss: 0.8560\n",
      "Epoch [4/10], Validation Loss: 0.9376, Validation Accuracy: 66.21%\n",
      "Epoch [5/10], Step [0], Loss: 0.7747\n",
      "Epoch [5/10], Step [50], Loss: 0.8466\n",
      "Epoch [5/10], Step [100], Loss: 0.7323\n",
      "Epoch [5/10], Average Training Loss: 0.8112\n",
      "Epoch [5/10], Validation Loss: 1.0802, Validation Accuracy: 62.22%\n",
      "Epoch [6/10], Step [0], Loss: 0.7930\n",
      "Epoch [6/10], Step [50], Loss: 0.9409\n",
      "Epoch [6/10], Step [100], Loss: 0.9053\n",
      "Epoch [6/10], Average Training Loss: 0.7811\n",
      "Epoch [6/10], Validation Loss: 0.8764, Validation Accuracy: 69.04%\n",
      "Epoch [7/10], Step [0], Loss: 0.8094\n",
      "Epoch [7/10], Step [50], Loss: 0.8157\n",
      "Epoch [7/10], Step [100], Loss: 0.8884\n",
      "Epoch [7/10], Average Training Loss: 0.7541\n",
      "Epoch [7/10], Validation Loss: 0.8410, Validation Accuracy: 68.68%\n",
      "Epoch [8/10], Step [0], Loss: 0.8099\n",
      "Epoch [8/10], Step [50], Loss: 0.6685\n",
      "Epoch [8/10], Step [100], Loss: 0.5818\n",
      "Epoch [8/10], Average Training Loss: 0.7329\n",
      "Epoch [8/10], Validation Loss: 0.8357, Validation Accuracy: 69.99%\n",
      "Epoch [9/10], Step [0], Loss: 0.7560\n",
      "Epoch [9/10], Step [50], Loss: 0.7782\n",
      "Epoch [9/10], Step [100], Loss: 0.7208\n",
      "Epoch [9/10], Average Training Loss: 0.7066\n",
      "Epoch [9/10], Validation Loss: 0.8511, Validation Accuracy: 70.32%\n",
      "Epoch [10/10], Step [0], Loss: 0.6820\n",
      "Epoch [10/10], Step [50], Loss: 0.7505\n",
      "Epoch [10/10], Step [100], Loss: 0.6726\n",
      "Epoch [10/10], Average Training Loss: 0.6901\n",
      "Epoch [10/10], Validation Loss: 0.8035, Validation Accuracy: 70.71%\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 10\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for batch_idx, (images, tabular_data, labels) in enumerate(train_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images, tabular_data)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        if batch_idx % 50 == 0:\n",
    "            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}], Loss: {loss.item():.4f}')\n",
    "    \n",
    "    avg_train_loss = running_loss / len(train_loader)\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Average Training Loss: {avg_train_loss:.4f}')\n",
    "    \n",
    "    # Validation loop\n",
    "    model.eval()\n",
    "    val_running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (images, tabular_data, labels) in enumerate(val_loader):\n",
    "            images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "            outputs = model(images, tabular_data)\n",
    "            val_loss = criterion(outputs, labels)\n",
    "            val_running_loss += val_loss.item()\n",
    "\n",
    "            # Convert one-hot encoded ground truth labels to class indices\n",
    "            true_labels = torch.argmax(labels, dim=1)\n",
    "\n",
    "            # Get the predicted class indices\n",
    "            predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted_labels == true_labels).sum().item()\n",
    "    \n",
    "    avg_val_loss = val_running_loss / len(val_loader)\n",
    "    val_accuracy = 100 * correct / total\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Validation Loss: {avg_val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "93cfa9da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:31:57.502821Z",
     "iopub.status.busy": "2024-06-24T15:31:57.502075Z",
     "iopub.status.idle": "2024-06-24T15:34:17.411962Z",
     "shell.execute_reply": "2024-06-24T15:34:17.410985Z"
    },
    "papermill": {
     "duration": 139.938538,
     "end_time": "2024-06-24T15:34:17.427037",
     "exception": false,
     "start_time": "2024-06-24T15:31:57.488499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 0.8180, Test Accuracy: 70.14%\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         MEL       0.73      0.41      0.52       848\n",
      "          NV       0.83      0.85      0.84      2172\n",
      "         BCC       0.62      0.87      0.72       654\n",
      "          AK       0.44      0.40      0.42       173\n",
      "         BKL       0.43      0.61      0.50       444\n",
      "          DF       0.67      0.17      0.27        47\n",
      "        VASC       0.68      0.63      0.66        41\n",
      "         SCC       0.75      0.12      0.20       128\n",
      "\n",
      "    accuracy                           0.70      4507\n",
      "   macro avg       0.64      0.51      0.52      4507\n",
      "weighted avg       0.72      0.70      0.69      4507\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "model.eval()\n",
    "test_running_loss = 0.0\n",
    "correct = 0\n",
    "total = 0\n",
    "all_true_labels = []\n",
    "all_predicted_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for idx, (images, tabular_data, labels) in enumerate(test_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        outputs = model(images, tabular_data)\n",
    "        test_loss = criterion(outputs, labels)\n",
    "        test_running_loss += test_loss.item()\n",
    "\n",
    "        true_labels = torch.argmax(labels, dim=1)\n",
    "        predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "        all_true_labels.extend(true_labels.cpu().numpy())\n",
    "        all_predicted_labels.extend(predicted_labels.cpu().numpy())\n",
    "\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted_labels == true_labels).sum().item()\n",
    "\n",
    "avg_test_loss = test_running_loss / len(test_loader)\n",
    "test_accuracy = 100 * correct / total\n",
    "print(f'Test Loss: {avg_test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%')\n",
    "\n",
    "# Generate classification report\n",
    "class_names = ['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']\n",
    "report = classification_report(all_true_labels, all_predicted_labels, target_names=class_names)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "eba72f65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:34:17.454131Z",
     "iopub.status.busy": "2024-06-24T15:34:17.453816Z",
     "iopub.status.idle": "2024-06-24T15:34:18.143951Z",
     "shell.execute_reply": "2024-06-24T15:34:18.143106Z"
    },
    "papermill": {
     "duration": 0.706603,
     "end_time": "2024-06-24T15:34:18.146582",
     "exception": false,
     "start_time": "2024-06-24T15:34:17.439979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm = confusion_matrix(all_true_labels, all_predicted_labels)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c99f7a0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:34:18.175990Z",
     "iopub.status.busy": "2024-06-24T15:34:18.175708Z",
     "iopub.status.idle": "2024-06-24T15:34:18.181999Z",
     "shell.execute_reply": "2024-06-24T15:34:18.181161Z"
    },
    "papermill": {
     "duration": 0.0232,
     "end_time": "2024-06-24T15:34:18.183877",
     "exception": false,
     "start_time": "2024-06-24T15:34:18.160677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #Test set on image input (64*64*3 with weights frequency_based and batch size 128): 67.34%\n",
    "# Test Loss: 1.3568, Test Accuracy: 69.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.57      0.59      0.58       870\n",
    "#           NV       0.81      0.87      0.84      2127\n",
    "#          BCC       0.60      0.82      0.69       664\n",
    "#           AK       0.54      0.23      0.32       186\n",
    "#          BKL       0.54      0.24      0.33       458\n",
    "#           DF       0.86      0.12      0.21        50\n",
    "#         VASC       0.41      0.69      0.51        32\n",
    "#          SCC       0.34      0.24      0.28       120\n",
    "\n",
    "#     accuracy                           0.69      4507\n",
    "#    macro avg       0.58      0.48      0.47      4507\n",
    "# weighted avg       0.68      0.69      0.67      4507\n",
    "\n",
    "# #Test set on image input (256*256*3 with weights proportionaly-inverse, normalized and batch size 128):\n",
    "# Test Loss: 0.0378, Test Accuracy: 54.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.58      0.41      0.48       870\n",
    "#           NV       0.91      0.61      0.73      2127\n",
    "#          BCC       0.63      0.53      0.58       664\n",
    "#           AK       0.23      0.66      0.34       186\n",
    "#          BKL       0.25      0.47      0.33       458\n",
    "#           DF       0.20      0.50      0.28        50\n",
    "#         VASC       0.19      0.91      0.31        32\n",
    "#          SCC       0.19      0.34      0.24       120\n",
    "\n",
    "#     accuracy                           0.54      4507\n",
    "#    macro avg       0.40      0.55      0.41      4507\n",
    "# weighted avg       0.68      0.54      0.58      4507\n",
    "\n",
    "\n",
    "# #Test set on image input (256*256*3 with no weights and batch size 128): \n",
    "# Test Loss: 1.4176, Test Accuracy: 70.42%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.67      0.50      0.57       870\n",
    "#           NV       0.74      0.94      0.83      2127\n",
    "#          BCC       0.69      0.77      0.73       664\n",
    "#           AK       0.42      0.32      0.36       186\n",
    "#          BKL       0.66      0.27      0.38       458\n",
    "#           DF       0.62      0.10      0.17        50\n",
    "#         VASC       0.68      0.72      0.70        32\n",
    "#          SCC       0.44      0.19      0.27       120\n",
    "\n",
    "#     accuracy                           0.70      4507\n",
    "#    macro avg       0.62      0.47      0.50      4507\n",
    "# weighted avg       0.69      0.70      0.68      4507\n",
    "\n",
    "\n",
    "# 16*16:\n",
    "#     Test Loss: 0.9945, Test Accuracy: 65.14%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.59      0.48      0.53       870\n",
    "#           NV       0.78      0.90      0.83      2127\n",
    "#          BCC       0.61      0.53      0.57       664\n",
    "#           AK       0.23      0.28      0.26       186\n",
    "#          BKL       0.45      0.35      0.40       458\n",
    "#           DF       0.50      0.04      0.07        50\n",
    "#         VASC       0.83      0.31      0.45        32\n",
    "#          SCC       0.17      0.23      0.20       120\n",
    "\n",
    "#     accuracy                           0.65      4507\n",
    "#    macro avg       0.52      0.39      0.41      4507\n",
    "# weighted avg       0.64      0.65      0.64      4507\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51907512",
   "metadata": {
    "papermill": {
     "duration": 0.013445,
     "end_time": "2024-06-24T15:34:18.211104",
     "exception": false,
     "start_time": "2024-06-24T15:34:18.197659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60776334",
   "metadata": {
    "papermill": {
     "duration": 0.017017,
     "end_time": "2024-06-24T15:34:18.242033",
     "exception": false,
     "start_time": "2024-06-24T15:34:18.225016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 679322,
     "sourceId": 1193409,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4527.509215,
   "end_time": "2024-06-24T15:34:19.686602",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-24T14:18:52.177387",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
