{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5604238f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:29.687967Z",
     "iopub.status.busy": "2024-06-24T11:00:29.687629Z",
     "iopub.status.idle": "2024-06-24T11:00:35.572394Z",
     "shell.execute_reply": "2024-06-24T11:00:35.571504Z"
    },
    "papermill": {
     "duration": 5.895768,
     "end_time": "2024-06-24T11:00:35.574666",
     "exception": false,
     "start_time": "2024-06-24T11:00:29.678898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import models, transforms\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from PIL import Image\n",
    "import torch\n",
    "import os\n",
    "import pandas as pd\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "37bcc662",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.590066Z",
     "iopub.status.busy": "2024-06-24T11:00:35.589333Z",
     "iopub.status.idle": "2024-06-24T11:00:35.735885Z",
     "shell.execute_reply": "2024-06-24T11:00:35.735126Z"
    },
    "papermill": {
     "duration": 0.156473,
     "end_time": "2024-06-24T11:00:35.738119",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.581646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_ground_truth = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_GroundTruth.csv\")\n",
    "df_metadata = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_Metadata.csv\")\n",
    "df = pd.merge(df_ground_truth, df_metadata, on='image', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "99a585ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.752970Z",
     "iopub.status.busy": "2024-06-24T11:00:35.752446Z",
     "iopub.status.idle": "2024-06-24T11:00:35.756253Z",
     "shell.execute_reply": "2024-06-24T11:00:35.755453Z"
    },
    "papermill": {
     "duration": 0.01305,
     "end_time": "2024-06-24T11:00:35.758023",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.744973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_dir = \"/kaggle/input/isic-2019/ISIC_2019_Training_Input/ISIC_2019_Training_Input\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "45d38733",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.776645Z",
     "iopub.status.busy": "2024-06-24T11:00:35.776298Z",
     "iopub.status.idle": "2024-06-24T11:00:35.784488Z",
     "shell.execute_reply": "2024-06-24T11:00:35.783863Z"
    },
    "papermill": {
     "duration": 0.022292,
     "end_time": "2024-06-24T11:00:35.788579",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.766287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"UNK\", \"lesion_id\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ad607026",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.804670Z",
     "iopub.status.busy": "2024-06-24T11:00:35.804243Z",
     "iopub.status.idle": "2024-06-24T11:00:35.833678Z",
     "shell.execute_reply": "2024-06-24T11:00:35.832776Z"
    },
    "papermill": {
     "duration": 0.038945,
     "end_time": "2024-06-24T11:00:35.835513",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.796568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>posterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "  anatom_site_general     sex  \n",
       "0      anterior torso  female  \n",
       "1      anterior torso  female  \n",
       "2     upper extremity  female  \n",
       "3     upper extremity    male  \n",
       "4     posterior torso    male  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d80500c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.850491Z",
     "iopub.status.busy": "2024-06-24T11:00:35.849868Z",
     "iopub.status.idle": "2024-06-24T11:00:35.875084Z",
     "shell.execute_reply": "2024-06-24T11:00:35.874068Z"
    },
    "papermill": {
     "duration": 0.03481,
     "end_time": "2024-06-24T11:00:35.877139",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.842329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25331 entries, 0 to 25330\n",
      "Data columns (total 12 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   image                25331 non-null  object \n",
      " 1   MEL                  25331 non-null  float64\n",
      " 2   NV                   25331 non-null  float64\n",
      " 3   BCC                  25331 non-null  float64\n",
      " 4   AK                   25331 non-null  float64\n",
      " 5   BKL                  25331 non-null  float64\n",
      " 6   DF                   25331 non-null  float64\n",
      " 7   VASC                 25331 non-null  float64\n",
      " 8   SCC                  25331 non-null  float64\n",
      " 9   age_approx           24894 non-null  float64\n",
      " 10  anatom_site_general  22700 non-null  object \n",
      " 11  sex                  24947 non-null  object \n",
      "dtypes: float64(9), object(3)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6d85adde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.892918Z",
     "iopub.status.busy": "2024-06-24T11:00:35.892330Z",
     "iopub.status.idle": "2024-06-24T11:00:35.899908Z",
     "shell.execute_reply": "2024-06-24T11:00:35.898902Z"
    },
    "papermill": {
     "duration": 0.017479,
     "end_time": "2024-06-24T11:00:35.901959",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.884480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/290600658.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['age_approx'].fillna(median_age, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "median_age = df['age_approx'].median()\n",
    "df['age_approx'].fillna(median_age, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eba20272",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.917716Z",
     "iopub.status.busy": "2024-06-24T11:00:35.917393Z",
     "iopub.status.idle": "2024-06-24T11:00:35.931891Z",
     "shell.execute_reply": "2024-06-24T11:00:35.931113Z"
    },
    "papermill": {
     "duration": 0.024759,
     "end_time": "2024-06-24T11:00:35.934062",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.909303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2b44aa61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:35.950195Z",
     "iopub.status.busy": "2024-06-24T11:00:35.949508Z",
     "iopub.status.idle": "2024-06-24T11:00:36.904796Z",
     "shell.execute_reply": "2024-06-24T11:00:36.903955Z"
    },
    "papermill": {
     "duration": 0.965667,
     "end_time": "2024-06-24T11:00:36.907161",
     "exception": false,
     "start_time": "2024-06-24T11:00:35.941494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "one_hot = pd.get_dummies(df[[\"anatom_site_general\", \"sex\"]], drop_first=True)\n",
    "\n",
    "df = df.drop([\"anatom_site_general\", \"sex\"], axis=1)\n",
    "df = pd.concat([df, one_hot], axis=1)\n",
    "\n",
    "bool_columns = df.select_dtypes(include=['bool']).columns\n",
    "df[bool_columns] = df[bool_columns].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8e77a1eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:36.923964Z",
     "iopub.status.busy": "2024-06-24T11:00:36.923648Z",
     "iopub.status.idle": "2024-06-24T11:00:36.944297Z",
     "shell.execute_reply": "2024-06-24T11:00:36.943489Z"
    },
    "papermill": {
     "duration": 0.03081,
     "end_time": "2024-06-24T11:00:36.946247",
     "exception": false,
     "start_time": "2024-06-24T11:00:36.915437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "   anatom_site_general_head/neck  anatom_site_general_lateral torso  \\\n",
       "0                              0                                  0   \n",
       "1                              0                                  0   \n",
       "2                              0                                  0   \n",
       "3                              0                                  0   \n",
       "4                              0                                  0   \n",
       "\n",
       "   anatom_site_general_lower extremity  anatom_site_general_oral/genital  \\\n",
       "0                                    0                                 0   \n",
       "1                                    0                                 0   \n",
       "2                                    0                                 0   \n",
       "3                                    0                                 0   \n",
       "4                                    0                                 0   \n",
       "\n",
       "   anatom_site_general_palms/soles  anatom_site_general_posterior torso  \\\n",
       "0                                0                                    0   \n",
       "1                                0                                    0   \n",
       "2                                0                                    0   \n",
       "3                                0                                    0   \n",
       "4                                0                                    1   \n",
       "\n",
       "   anatom_site_general_upper extremity  sex_male  \n",
       "0                                    0         0  \n",
       "1                                    0         0  \n",
       "2                                    1         0  \n",
       "3                                    1         1  \n",
       "4                                    0         1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b5f5dde1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:36.962192Z",
     "iopub.status.busy": "2024-06-24T11:00:36.961913Z",
     "iopub.status.idle": "2024-06-24T11:00:37.061891Z",
     "shell.execute_reply": "2024-06-24T11:00:37.060518Z"
    },
    "papermill": {
     "duration": 0.11054,
     "end_time": "2024-06-24T11:00:37.064113",
     "exception": false,
     "start_time": "2024-06-24T11:00:36.953573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: 14419\n",
      "Validation set size: 3605\n",
      "Test set size: 4507\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_val_df, test_df = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "# Then, split the training+validation set into training and validation sets\n",
    "train_df, val_df = train_test_split(train_val_df, test_size=0.2, random_state=42)\n",
    "\n",
    "print(f\"Train set size: {len(train_df)}\")\n",
    "print(f\"Validation set size: {len(val_df)}\")\n",
    "print(f\"Test set size: {len(test_df)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9094b1b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:37.081751Z",
     "iopub.status.busy": "2024-06-24T11:00:37.081455Z",
     "iopub.status.idle": "2024-06-24T11:00:37.115158Z",
     "shell.execute_reply": "2024-06-24T11:00:37.114215Z"
    },
    "papermill": {
     "duration": 0.044671,
     "end_time": "2024-06-24T11:00:37.117060",
     "exception": false,
     "start_time": "2024-06-24T11:00:37.072389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16634</th>\n",
       "      <td>ISIC_0059427</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23936</th>\n",
       "      <td>ISIC_0071042</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11033</th>\n",
       "      <td>ISIC_0032436</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2619</th>\n",
       "      <td>ISIC_0015109_downsampled</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3629</th>\n",
       "      <td>ISIC_0025032</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22197</th>\n",
       "      <td>ISIC_0068305</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12019</th>\n",
       "      <td>ISIC_0033422</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19211</th>\n",
       "      <td>ISIC_0063568</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18928</th>\n",
       "      <td>ISIC_0063094</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16725</th>\n",
       "      <td>ISIC_0059570</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14419 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  \\\n",
       "16634              ISIC_0059427  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "23936              ISIC_0071042  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "11033              ISIC_0032436  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "2619   ISIC_0015109_downsampled  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "3629               ISIC_0025032  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0   \n",
       "...                         ...  ...  ...  ...  ...  ...  ...   ...  ...   \n",
       "22197              ISIC_0068305  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "12019              ISIC_0033422  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0   \n",
       "19211              ISIC_0063568  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "18928              ISIC_0063094  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "16725              ISIC_0059570  0.0  0.0  1.0  0.0  0.0  0.0   0.0  0.0   \n",
       "\n",
       "       age_approx  anatom_site_general_head/neck  \\\n",
       "16634        85.0                              1   \n",
       "23936         0.0                              0   \n",
       "11033        50.0                              0   \n",
       "2619         40.0                              0   \n",
       "3629         75.0                              0   \n",
       "...           ...                            ...   \n",
       "22197        15.0                              0   \n",
       "12019        45.0                              0   \n",
       "19211        50.0                              0   \n",
       "18928        60.0                              0   \n",
       "16725        50.0                              1   \n",
       "\n",
       "       anatom_site_general_lateral torso  anatom_site_general_lower extremity  \\\n",
       "16634                                  0                                    0   \n",
       "23936                                  0                                    0   \n",
       "11033                                  0                                    0   \n",
       "2619                                   0                                    0   \n",
       "3629                                   0                                    0   \n",
       "...                                  ...                                  ...   \n",
       "22197                                  0                                    0   \n",
       "12019                                  0                                    1   \n",
       "19211                                  0                                    1   \n",
       "18928                                  0                                    0   \n",
       "16725                                  0                                    0   \n",
       "\n",
       "       anatom_site_general_oral/genital  anatom_site_general_palms/soles  \\\n",
       "16634                                 0                                0   \n",
       "23936                                 0                                1   \n",
       "11033                                 0                                0   \n",
       "2619                                  0                                0   \n",
       "3629                                  0                                0   \n",
       "...                                 ...                              ...   \n",
       "22197                                 0                                0   \n",
       "12019                                 0                                0   \n",
       "19211                                 0                                0   \n",
       "18928                                 0                                0   \n",
       "16725                                 0                                0   \n",
       "\n",
       "       anatom_site_general_posterior torso  \\\n",
       "16634                                    0   \n",
       "23936                                    0   \n",
       "11033                                    1   \n",
       "2619                                     1   \n",
       "3629                                     1   \n",
       "...                                    ...   \n",
       "22197                                    0   \n",
       "12019                                    0   \n",
       "19211                                    0   \n",
       "18928                                    0   \n",
       "16725                                    0   \n",
       "\n",
       "       anatom_site_general_upper extremity  sex_male  \n",
       "16634                                    0         1  \n",
       "23936                                    0         0  \n",
       "11033                                    0         0  \n",
       "2619                                     0         1  \n",
       "3629                                     0         0  \n",
       "...                                    ...       ...  \n",
       "22197                                    0         1  \n",
       "12019                                    0         1  \n",
       "19211                                    0         1  \n",
       "18928                                    0         1  \n",
       "16725                                    0         1  \n",
       "\n",
       "[14419 rows x 18 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a89a5d09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:37.134493Z",
     "iopub.status.busy": "2024-06-24T11:00:37.134231Z",
     "iopub.status.idle": "2024-06-24T11:00:37.141999Z",
     "shell.execute_reply": "2024-06-24T11:00:37.141075Z"
    },
    "papermill": {
     "duration": 0.018542,
     "end_time": "2024-06-24T11:00:37.143944",
     "exception": false,
     "start_time": "2024-06-24T11:00:37.125402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MelanomaDataset(Dataset):\n",
    "    def __init__(self, df, img_dir, transform):\n",
    "        self.img_dir = img_dir\n",
    "        self.df = df\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img_name = os.path.join(self.img_dir, self.df.iloc[idx, 0] + '.jpg')  # Assuming .jpg extension\n",
    "        image = Image.open(img_name)\n",
    "        if transform:\n",
    "            image = self.transform(image)\n",
    "        values = np.array(self.df.iloc[idx, 9:].values, dtype=np.float32)\n",
    "        \n",
    "        characteristics = torch.tensor(values, dtype=torch.float32)\n",
    "        label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n",
    "        return image, characteristics, label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2675b903",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:37.161392Z",
     "iopub.status.busy": "2024-06-24T11:00:37.161115Z",
     "iopub.status.idle": "2024-06-24T11:00:37.166051Z",
     "shell.execute_reply": "2024-06-24T11:00:37.165205Z"
    },
    "papermill": {
     "duration": 0.015812,
     "end_time": "2024-06-24T11:00:37.167967",
     "exception": false,
     "start_time": "2024-06-24T11:00:37.152155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "transform = transforms.Compose([\n",
    "    transforms.Resize((256, 256)),  # Resize to match input size of the model\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7b5cdeac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:37.184926Z",
     "iopub.status.busy": "2024-06-24T11:00:37.184644Z",
     "iopub.status.idle": "2024-06-24T11:00:37.190098Z",
     "shell.execute_reply": "2024-06-24T11:00:37.189236Z"
    },
    "papermill": {
     "duration": 0.016101,
     "end_time": "2024-06-24T11:00:37.192001",
     "exception": false,
     "start_time": "2024-06-24T11:00:37.175900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = MelanomaDataset(train_df, images_dir, transform)\n",
    "val_dataset = MelanomaDataset(val_df, images_dir, transform)\n",
    "test_dataset = MelanomaDataset(test_df, images_dir, transform)\n",
    "\n",
    "# Create DataLoader for each dataset\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=128, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3848071c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:37.209307Z",
     "iopub.status.busy": "2024-06-24T11:00:37.209003Z",
     "iopub.status.idle": "2024-06-24T11:00:37.216922Z",
     "shell.execute_reply": "2024-06-24T11:00:37.216069Z"
    },
    "papermill": {
     "duration": 0.019147,
     "end_time": "2024-06-24T11:00:37.219043",
     "exception": false,
     "start_time": "2024-06-24T11:00:37.199896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CombinedModel(nn.Module):\n",
    "    def __init__(self, num_tabular_features):\n",
    "        super(CombinedModel, self).__init__()\n",
    "        self.cnn = models.resnet18(weights=True)\n",
    "        self.cnn.fc = nn.Identity()  # Remove the final classification layer\n",
    "        \n",
    "        self.tabular_fc1 = nn.Linear(num_tabular_features, 128)\n",
    "        self.tabular_fc2 = nn.Linear(128, 64)\n",
    "        \n",
    "        self.fc1 = nn.Linear(512 + 64, 128)  \n",
    "        self.fc2 = nn.Linear(128, 8)  \n",
    "\n",
    "    def forward(self, image, tabular_data):\n",
    "        cnn_features = self.cnn(image)\n",
    "        \n",
    "        tabular_out = nn.ReLU()(self.tabular_fc1(tabular_data))\n",
    "        tabular_out = nn.ReLU()(self.tabular_fc2(tabular_out))\n",
    "        \n",
    "        combined_features = torch.cat((cnn_features, tabular_out), dim=1)\n",
    "        x = nn.ReLU()(self.fc1(combined_features))\n",
    "        x = self.fc2(x)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7091d3f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:37.236512Z",
     "iopub.status.busy": "2024-06-24T11:00:37.235985Z",
     "iopub.status.idle": "2024-06-24T11:00:37.706524Z",
     "shell.execute_reply": "2024-06-24T11:00:37.705639Z"
    },
    "papermill": {
     "duration": 0.481613,
     "end_time": "2024-06-24T11:00:37.708588",
     "exception": false,
     "start_time": "2024-06-24T11:00:37.226975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0.0182, 0.0074, 0.0244, 0.0938, 0.0339, 0.3374, 0.3572, 0.1275],\n",
       "       device='cuda:0')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "A = np.array([df[cls].sum() for cls in df.columns[1:9]])\n",
    "\n",
    "class_weights = len(df) / A\n",
    "weights_tensor = torch.tensor(class_weights, dtype=torch.float).to(device)\n",
    "\n",
    "normalized_weights_tensor = (1/sum(weights_tensor)) * weights_tensor\n",
    "normalized_weights_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b6458d78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:37.726750Z",
     "iopub.status.busy": "2024-06-24T11:00:37.726152Z",
     "iopub.status.idle": "2024-06-24T11:00:38.428400Z",
     "shell.execute_reply": "2024-06-24T11:00:38.427479Z"
    },
    "papermill": {
     "duration": 0.713508,
     "end_time": "2024-06-24T11:00:38.430387",
     "exception": false,
     "start_time": "2024-06-24T11:00:37.716879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n",
      "100%|██████████| 44.7M/44.7M [00:00<00:00, 139MB/s]\n"
     ]
    }
   ],
   "source": [
    "num_tabular_features = len(df.columns[9:])\n",
    "print(num_tabular_features)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()# weight=normalized_weights_tensor) \n",
    "model = CombinedModel(num_tabular_features).to(device)\n",
    "optimizer = optim.Adam(lr=0.001, params=model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "437614e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:00:38.449707Z",
     "iopub.status.busy": "2024-06-24T11:00:38.449362Z",
     "iopub.status.idle": "2024-06-24T11:54:53.566367Z",
     "shell.execute_reply": "2024-06-24T11:54:53.565351Z"
    },
    "papermill": {
     "duration": 3255.141319,
     "end_time": "2024-06-24T11:54:53.580833",
     "exception": false,
     "start_time": "2024-06-24T11:00:38.439514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/10], Step [0], Loss: 1.9511\n",
      "Epoch [1/10], Step [50], Loss: 1.1000\n",
      "Epoch [1/10], Step [100], Loss: 0.8006\n",
      "Epoch [1/10], Average Training Loss: 1.0195\n",
      "Epoch [1/10], Validation Loss: 1.0107, Validation Accuracy: 64.72%\n",
      "Epoch [2/10], Step [0], Loss: 0.8394\n",
      "Epoch [2/10], Step [50], Loss: 0.9234\n",
      "Epoch [2/10], Step [100], Loss: 0.7613\n",
      "Epoch [2/10], Average Training Loss: 0.8577\n",
      "Epoch [2/10], Validation Loss: 1.0354, Validation Accuracy: 63.77%\n",
      "Epoch [3/10], Step [0], Loss: 0.7546\n",
      "Epoch [3/10], Step [50], Loss: 0.7837\n",
      "Epoch [3/10], Step [100], Loss: 0.7106\n",
      "Epoch [3/10], Average Training Loss: 0.7713\n",
      "Epoch [3/10], Validation Loss: 1.0673, Validation Accuracy: 61.97%\n",
      "Epoch [4/10], Step [0], Loss: 0.6216\n",
      "Epoch [4/10], Step [50], Loss: 0.6479\n",
      "Epoch [4/10], Step [100], Loss: 0.7614\n",
      "Epoch [4/10], Average Training Loss: 0.6775\n",
      "Epoch [4/10], Validation Loss: 1.0502, Validation Accuracy: 62.91%\n",
      "Epoch [5/10], Step [0], Loss: 0.5204\n",
      "Epoch [5/10], Step [50], Loss: 0.4667\n",
      "Epoch [5/10], Step [100], Loss: 0.5545\n",
      "Epoch [5/10], Average Training Loss: 0.5715\n",
      "Epoch [5/10], Validation Loss: 0.9316, Validation Accuracy: 68.29%\n",
      "Epoch [6/10], Step [0], Loss: 0.5137\n",
      "Epoch [6/10], Step [50], Loss: 0.3519\n",
      "Epoch [6/10], Step [100], Loss: 0.5848\n",
      "Epoch [6/10], Average Training Loss: 0.4864\n",
      "Epoch [6/10], Validation Loss: 0.9316, Validation Accuracy: 67.55%\n",
      "Epoch [7/10], Step [0], Loss: 0.2902\n",
      "Epoch [7/10], Step [50], Loss: 0.4980\n",
      "Epoch [7/10], Step [100], Loss: 0.3742\n",
      "Epoch [7/10], Average Training Loss: 0.3850\n",
      "Epoch [7/10], Validation Loss: 1.0222, Validation Accuracy: 70.57%\n",
      "Epoch [8/10], Step [0], Loss: 0.2375\n",
      "Epoch [8/10], Step [50], Loss: 0.3198\n",
      "Epoch [8/10], Step [100], Loss: 0.3357\n",
      "Epoch [8/10], Average Training Loss: 0.2778\n",
      "Epoch [8/10], Validation Loss: 1.0347, Validation Accuracy: 67.82%\n",
      "Epoch [9/10], Step [0], Loss: 0.2039\n",
      "Epoch [9/10], Step [50], Loss: 0.1115\n",
      "Epoch [9/10], Step [100], Loss: 0.1730\n",
      "Epoch [9/10], Average Training Loss: 0.2011\n",
      "Epoch [9/10], Validation Loss: 1.1140, Validation Accuracy: 70.40%\n",
      "Epoch [10/10], Step [0], Loss: 0.0818\n",
      "Epoch [10/10], Step [50], Loss: 0.0895\n",
      "Epoch [10/10], Step [100], Loss: 0.1949\n",
      "Epoch [10/10], Average Training Loss: 0.1306\n",
      "Epoch [10/10], Validation Loss: 1.5103, Validation Accuracy: 63.33%\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 10\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for batch_idx, (images, tabular_data, labels) in enumerate(train_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images, tabular_data)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        if batch_idx % 50 == 0:\n",
    "            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}], Loss: {loss.item():.4f}')\n",
    "    \n",
    "    avg_train_loss = running_loss / len(train_loader)\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Average Training Loss: {avg_train_loss:.4f}')\n",
    "    \n",
    "    # Validation loop\n",
    "    model.eval()\n",
    "    val_running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (images, tabular_data, labels) in enumerate(val_loader):\n",
    "            images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "            outputs = model(images, tabular_data)\n",
    "            val_loss = criterion(outputs, labels)\n",
    "            val_running_loss += val_loss.item()\n",
    "\n",
    "            # Convert one-hot encoded ground truth labels to class indices\n",
    "            true_labels = torch.argmax(labels, dim=1)\n",
    "\n",
    "            # Get the predicted class indices\n",
    "            predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted_labels == true_labels).sum().item()\n",
    "    \n",
    "    avg_val_loss = val_running_loss / len(val_loader)\n",
    "    val_accuracy = 100 * correct / total\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Validation Loss: {avg_val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0aced342",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:54:53.607879Z",
     "iopub.status.busy": "2024-06-24T11:54:53.607131Z",
     "iopub.status.idle": "2024-06-24T11:56:47.712850Z",
     "shell.execute_reply": "2024-06-24T11:56:47.711858Z"
    },
    "papermill": {
     "duration": 114.135277,
     "end_time": "2024-06-24T11:56:47.728757",
     "exception": false,
     "start_time": "2024-06-24T11:54:53.593480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 1.4886, Test Accuracy: 63.77%\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         MEL       0.46      0.69      0.56       848\n",
      "          NV       0.89      0.66      0.76      2172\n",
      "         BCC       0.63      0.75      0.69       654\n",
      "          AK       0.29      0.49      0.36       173\n",
      "         BKL       0.48      0.48      0.48       444\n",
      "          DF       0.71      0.11      0.19        47\n",
      "        VASC       0.78      0.44      0.56        41\n",
      "         SCC       0.42      0.25      0.31       128\n",
      "\n",
      "    accuracy                           0.64      4507\n",
      "   macro avg       0.58      0.48      0.49      4507\n",
      "weighted avg       0.69      0.64      0.65      4507\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "model.eval()\n",
    "test_running_loss = 0.0\n",
    "correct = 0\n",
    "total = 0\n",
    "all_true_labels = []\n",
    "all_predicted_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for idx, (images, tabular_data, labels) in enumerate(test_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        outputs = model(images, tabular_data)\n",
    "        test_loss = criterion(outputs, labels)\n",
    "        test_running_loss += test_loss.item()\n",
    "\n",
    "        true_labels = torch.argmax(labels, dim=1)\n",
    "        predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "        all_true_labels.extend(true_labels.cpu().numpy())\n",
    "        all_predicted_labels.extend(predicted_labels.cpu().numpy())\n",
    "\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted_labels == true_labels).sum().item()\n",
    "\n",
    "avg_test_loss = test_running_loss / len(test_loader)\n",
    "test_accuracy = 100 * correct / total\n",
    "print(f'Test Loss: {avg_test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%')\n",
    "\n",
    "# Generate classification report\n",
    "class_names = ['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']\n",
    "report = classification_report(all_true_labels, all_predicted_labels, target_names=class_names)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4c8cc583",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:56:47.756916Z",
     "iopub.status.busy": "2024-06-24T11:56:47.756517Z",
     "iopub.status.idle": "2024-06-24T11:56:48.435074Z",
     "shell.execute_reply": "2024-06-24T11:56:48.434074Z"
    },
    "papermill": {
     "duration": 0.695722,
     "end_time": "2024-06-24T11:56:48.437742",
     "exception": false,
     "start_time": "2024-06-24T11:56:47.742020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm = confusion_matrix(all_true_labels, all_predicted_labels)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ad9b4bcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T11:56:48.468342Z",
     "iopub.status.busy": "2024-06-24T11:56:48.468021Z",
     "iopub.status.idle": "2024-06-24T11:56:48.474873Z",
     "shell.execute_reply": "2024-06-24T11:56:48.473963Z"
    },
    "papermill": {
     "duration": 0.024592,
     "end_time": "2024-06-24T11:56:48.476758",
     "exception": false,
     "start_time": "2024-06-24T11:56:48.452166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #Test set on image input (64*64*3 with weights frequency_based and batch size 128): 67.34%\n",
    "# Test Loss: 1.3568, Test Accuracy: 69.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.57      0.59      0.58       870\n",
    "#           NV       0.81      0.87      0.84      2127\n",
    "#          BCC       0.60      0.82      0.69       664\n",
    "#           AK       0.54      0.23      0.32       186\n",
    "#          BKL       0.54      0.24      0.33       458\n",
    "#           DF       0.86      0.12      0.21        50\n",
    "#         VASC       0.41      0.69      0.51        32\n",
    "#          SCC       0.34      0.24      0.28       120\n",
    "\n",
    "#     accuracy                           0.69      4507\n",
    "#    macro avg       0.58      0.48      0.47      4507\n",
    "# weighted avg       0.68      0.69      0.67      4507\n",
    "\n",
    "# #Test set on image input (256*256*3 with weights proportionaly-inverse, normalized and batch size 128):\n",
    "# Test Loss: 0.0378, Test Accuracy: 54.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.58      0.41      0.48       870\n",
    "#           NV       0.91      0.61      0.73      2127\n",
    "#          BCC       0.63      0.53      0.58       664\n",
    "#           AK       0.23      0.66      0.34       186\n",
    "#          BKL       0.25      0.47      0.33       458\n",
    "#           DF       0.20      0.50      0.28        50\n",
    "#         VASC       0.19      0.91      0.31        32\n",
    "#          SCC       0.19      0.34      0.24       120\n",
    "\n",
    "#     accuracy                           0.54      4507\n",
    "#    macro avg       0.40      0.55      0.41      4507\n",
    "# weighted avg       0.68      0.54      0.58      4507\n",
    "\n",
    "\n",
    "# #Test set on image input (256*256*3 with no weights and batch size 128): \n",
    "# Test Loss: 1.4176, Test Accuracy: 70.42%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.67      0.50      0.57       870\n",
    "#           NV       0.74      0.94      0.83      2127\n",
    "#          BCC       0.69      0.77      0.73       664\n",
    "#           AK       0.42      0.32      0.36       186\n",
    "#          BKL       0.66      0.27      0.38       458\n",
    "#           DF       0.62      0.10      0.17        50\n",
    "#         VASC       0.68      0.72      0.70        32\n",
    "#          SCC       0.44      0.19      0.27       120\n",
    "\n",
    "#     accuracy                           0.70      4507\n",
    "#    macro avg       0.62      0.47      0.50      4507\n",
    "# weighted avg       0.69      0.70      0.68      4507\n",
    "\n",
    "\n",
    "# 16*16:\n",
    "#     Test Loss: 0.9945, Test Accuracy: 65.14%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.59      0.48      0.53       870\n",
    "#           NV       0.78      0.90      0.83      2127\n",
    "#          BCC       0.61      0.53      0.57       664\n",
    "#           AK       0.23      0.28      0.26       186\n",
    "#          BKL       0.45      0.35      0.40       458\n",
    "#           DF       0.50      0.04      0.07        50\n",
    "#         VASC       0.83      0.31      0.45        32\n",
    "#          SCC       0.17      0.23      0.20       120\n",
    "\n",
    "#     accuracy                           0.65      4507\n",
    "#    macro avg       0.52      0.39      0.41      4507\n",
    "# weighted avg       0.64      0.65      0.64      4507\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f2a8da3",
   "metadata": {
    "papermill": {
     "duration": 0.013619,
     "end_time": "2024-06-24T11:56:48.504497",
     "exception": false,
     "start_time": "2024-06-24T11:56:48.490878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d367964c",
   "metadata": {
    "papermill": {
     "duration": 0.013603,
     "end_time": "2024-06-24T11:56:48.532797",
     "exception": false,
     "start_time": "2024-06-24T11:56:48.519194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 679322,
     "sourceId": 1193409,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3383.347383,
   "end_time": "2024-06-24T11:56:50.278315",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-24T11:00:26.930932",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
