{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9cd69a12",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:16.360962Z",
     "iopub.status.busy": "2024-06-24T08:17:16.360112Z",
     "iopub.status.idle": "2024-06-24T08:17:22.122472Z",
     "shell.execute_reply": "2024-06-24T08:17:22.121180Z"
    },
    "papermill": {
     "duration": 5.774799,
     "end_time": "2024-06-24T08:17:22.126039",
     "exception": false,
     "start_time": "2024-06-24T08:17:16.351240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import models, transforms\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from PIL import Image\n",
    "import torch\n",
    "import os\n",
    "import pandas as pd\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bf586d2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.143829Z",
     "iopub.status.busy": "2024-06-24T08:17:22.143325Z",
     "iopub.status.idle": "2024-06-24T08:17:22.306383Z",
     "shell.execute_reply": "2024-06-24T08:17:22.305558Z"
    },
    "papermill": {
     "duration": 0.173265,
     "end_time": "2024-06-24T08:17:22.308706",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.135441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_ground_truth = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_GroundTruth.csv\")\n",
    "df_metadata = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_Metadata.csv\")\n",
    "df = pd.merge(df_ground_truth, df_metadata, on='image', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc351fe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.323202Z",
     "iopub.status.busy": "2024-06-24T08:17:22.322895Z",
     "iopub.status.idle": "2024-06-24T08:17:22.326924Z",
     "shell.execute_reply": "2024-06-24T08:17:22.326099Z"
    },
    "papermill": {
     "duration": 0.013402,
     "end_time": "2024-06-24T08:17:22.328835",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.315433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_dir = \"/kaggle/input/isic-2019/ISIC_2019_Training_Input/ISIC_2019_Training_Input\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a8caa637",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.343182Z",
     "iopub.status.busy": "2024-06-24T08:17:22.342873Z",
     "iopub.status.idle": "2024-06-24T08:17:22.350358Z",
     "shell.execute_reply": "2024-06-24T08:17:22.349578Z"
    },
    "papermill": {
     "duration": 0.016804,
     "end_time": "2024-06-24T08:17:22.352246",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.335442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"UNK\", \"lesion_id\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "52f6b0c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.366423Z",
     "iopub.status.busy": "2024-06-24T08:17:22.366116Z",
     "iopub.status.idle": "2024-06-24T08:17:22.390098Z",
     "shell.execute_reply": "2024-06-24T08:17:22.389192Z"
    },
    "papermill": {
     "duration": 0.033632,
     "end_time": "2024-06-24T08:17:22.392351",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.358719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>posterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "  anatom_site_general     sex  \n",
       "0      anterior torso  female  \n",
       "1      anterior torso  female  \n",
       "2     upper extremity  female  \n",
       "3     upper extremity    male  \n",
       "4     posterior torso    male  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d6cf6e61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.408540Z",
     "iopub.status.busy": "2024-06-24T08:17:22.407867Z",
     "iopub.status.idle": "2024-06-24T08:17:22.440895Z",
     "shell.execute_reply": "2024-06-24T08:17:22.439479Z"
    },
    "papermill": {
     "duration": 0.044086,
     "end_time": "2024-06-24T08:17:22.443603",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.399517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25331 entries, 0 to 25330\n",
      "Data columns (total 12 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   image                25331 non-null  object \n",
      " 1   MEL                  25331 non-null  float64\n",
      " 2   NV                   25331 non-null  float64\n",
      " 3   BCC                  25331 non-null  float64\n",
      " 4   AK                   25331 non-null  float64\n",
      " 5   BKL                  25331 non-null  float64\n",
      " 6   DF                   25331 non-null  float64\n",
      " 7   VASC                 25331 non-null  float64\n",
      " 8   SCC                  25331 non-null  float64\n",
      " 9   age_approx           24894 non-null  float64\n",
      " 10  anatom_site_general  22700 non-null  object \n",
      " 11  sex                  24947 non-null  object \n",
      "dtypes: float64(9), object(3)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "32bf68dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.460401Z",
     "iopub.status.busy": "2024-06-24T08:17:22.459557Z",
     "iopub.status.idle": "2024-06-24T08:17:22.468593Z",
     "shell.execute_reply": "2024-06-24T08:17:22.467522Z"
    },
    "papermill": {
     "duration": 0.019593,
     "end_time": "2024-06-24T08:17:22.470964",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.451371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/290600658.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['age_approx'].fillna(median_age, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "median_age = df['age_approx'].median()\n",
    "df['age_approx'].fillna(median_age, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "741b1909",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.488165Z",
     "iopub.status.busy": "2024-06-24T08:17:22.487398Z",
     "iopub.status.idle": "2024-06-24T08:17:22.501144Z",
     "shell.execute_reply": "2024-06-24T08:17:22.500153Z"
    },
    "papermill": {
     "duration": 0.02377,
     "end_time": "2024-06-24T08:17:22.503192",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.479422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7f197149",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:22.519842Z",
     "iopub.status.busy": "2024-06-24T08:17:22.519138Z",
     "iopub.status.idle": "2024-06-24T08:17:23.456560Z",
     "shell.execute_reply": "2024-06-24T08:17:23.455610Z"
    },
    "papermill": {
     "duration": 0.949217,
     "end_time": "2024-06-24T08:17:23.459501",
     "exception": false,
     "start_time": "2024-06-24T08:17:22.510284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "one_hot = pd.get_dummies(df[[\"anatom_site_general\", \"sex\"]], drop_first=True)\n",
    "\n",
    "df = df.drop([\"anatom_site_general\", \"sex\"], axis=1)\n",
    "df = pd.concat([df, one_hot], axis=1)\n",
    "\n",
    "bool_columns = df.select_dtypes(include=['bool']).columns\n",
    "df[bool_columns] = df[bool_columns].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2f384193",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:23.480349Z",
     "iopub.status.busy": "2024-06-24T08:17:23.479427Z",
     "iopub.status.idle": "2024-06-24T08:17:23.505481Z",
     "shell.execute_reply": "2024-06-24T08:17:23.504355Z"
    },
    "papermill": {
     "duration": 0.037711,
     "end_time": "2024-06-24T08:17:23.507773",
     "exception": false,
     "start_time": "2024-06-24T08:17:23.470062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "\n",
       "   anatom_site_general_head/neck  anatom_site_general_lateral torso  \\\n",
       "0                              0                                  0   \n",
       "1                              0                                  0   \n",
       "2                              0                                  0   \n",
       "3                              0                                  0   \n",
       "4                              0                                  0   \n",
       "\n",
       "   anatom_site_general_lower extremity  anatom_site_general_oral/genital  \\\n",
       "0                                    0                                 0   \n",
       "1                                    0                                 0   \n",
       "2                                    0                                 0   \n",
       "3                                    0                                 0   \n",
       "4                                    0                                 0   \n",
       "\n",
       "   anatom_site_general_palms/soles  anatom_site_general_posterior torso  \\\n",
       "0                                0                                    0   \n",
       "1                                0                                    0   \n",
       "2                                0                                    0   \n",
       "3                                0                                    0   \n",
       "4                                0                                    1   \n",
       "\n",
       "   anatom_site_general_upper extremity  sex_male  \n",
       "0                                    0         0  \n",
       "1                                    0         0  \n",
       "2                                    1         0  \n",
       "3                                    1         1  \n",
       "4                                    0         1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6da3676f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:23.528421Z",
     "iopub.status.busy": "2024-06-24T08:17:23.527591Z",
     "iopub.status.idle": "2024-06-24T08:17:23.644041Z",
     "shell.execute_reply": "2024-06-24T08:17:23.642773Z"
    },
    "papermill": {
     "duration": 0.128496,
     "end_time": "2024-06-24T08:17:23.646311",
     "exception": false,
     "start_time": "2024-06-24T08:17:23.517815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: 14419\n",
      "Validation set size: 3605\n",
      "Test set size: 4507\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_val_df, test_df = train_test_split(df, test_size=0.2, random_state=42, stratify=df['MEL'])\n",
    "\n",
    "# Then, split the training+validation set into training and validation sets\n",
    "train_df, val_df = train_test_split(train_val_df, test_size=0.2, random_state=42, stratify=train_val_df['MEL'])\n",
    "\n",
    "print(f\"Train set size: {len(train_df)}\")\n",
    "print(f\"Validation set size: {len(val_df)}\")\n",
    "print(f\"Test set size: {len(test_df)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "80f7442e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:23.664897Z",
     "iopub.status.busy": "2024-06-24T08:17:23.663993Z",
     "iopub.status.idle": "2024-06-24T08:17:23.672786Z",
     "shell.execute_reply": "2024-06-24T08:17:23.671812Z"
    },
    "papermill": {
     "duration": 0.020114,
     "end_time": "2024-06-24T08:17:23.674861",
     "exception": false,
     "start_time": "2024-06-24T08:17:23.654747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MelanomaDataset(Dataset):\n",
    "    def __init__(self, df, img_dir, transform):\n",
    "        self.img_dir = img_dir\n",
    "        self.df = df\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img_name = os.path.join(self.img_dir, self.df.iloc[idx, 0] + '.jpg')  # Assuming .jpg extension\n",
    "        image = Image.open(img_name)\n",
    "        if transform:\n",
    "            image = self.transform(image)\n",
    "        values = np.array(self.df.iloc[idx, 9:].values, dtype=np.float32)\n",
    "        \n",
    "        characteristics = torch.tensor(values, dtype=torch.float32)\n",
    "        label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n",
    "        return image, characteristics, label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "00c5ad7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:23.692712Z",
     "iopub.status.busy": "2024-06-24T08:17:23.692379Z",
     "iopub.status.idle": "2024-06-24T08:17:23.697819Z",
     "shell.execute_reply": "2024-06-24T08:17:23.696782Z"
    },
    "papermill": {
     "duration": 0.016721,
     "end_time": "2024-06-24T08:17:23.700058",
     "exception": false,
     "start_time": "2024-06-24T08:17:23.683337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "transform = transforms.Compose([\n",
    "    transforms.Resize((256, 256)),  # Resize to match input size of the model\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "43cd96e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:23.717454Z",
     "iopub.status.busy": "2024-06-24T08:17:23.717184Z",
     "iopub.status.idle": "2024-06-24T08:17:23.723306Z",
     "shell.execute_reply": "2024-06-24T08:17:23.722420Z"
    },
    "papermill": {
     "duration": 0.017161,
     "end_time": "2024-06-24T08:17:23.725476",
     "exception": false,
     "start_time": "2024-06-24T08:17:23.708315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = MelanomaDataset(train_df, images_dir, transform)\n",
    "val_dataset = MelanomaDataset(val_df, images_dir, transform)\n",
    "test_dataset = MelanomaDataset(test_df, images_dir, transform)\n",
    "\n",
    "# Create DataLoader for each dataset\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=128, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fd9d3c8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:23.743053Z",
     "iopub.status.busy": "2024-06-24T08:17:23.742426Z",
     "iopub.status.idle": "2024-06-24T08:17:23.751030Z",
     "shell.execute_reply": "2024-06-24T08:17:23.750068Z"
    },
    "papermill": {
     "duration": 0.019664,
     "end_time": "2024-06-24T08:17:23.753134",
     "exception": false,
     "start_time": "2024-06-24T08:17:23.733470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CombinedModel(nn.Module):\n",
    "    def __init__(self, num_tabular_features):\n",
    "        super(CombinedModel, self).__init__()\n",
    "        self.cnn = models.resnet18(weights=True)\n",
    "        self.cnn.fc = nn.Identity()  # Remove the final classification layer\n",
    "        \n",
    "        self.tabular_fc1 = nn.Linear(num_tabular_features, 128)\n",
    "        self.tabular_fc2 = nn.Linear(128, 64)\n",
    "        \n",
    "        self.fc1 = nn.Linear(512 + 64, 128)  \n",
    "        self.fc2 = nn.Linear(128, 8)  \n",
    "\n",
    "    def forward(self, image, tabular_data):\n",
    "        cnn_features = self.cnn(image)\n",
    "        \n",
    "        tabular_out = nn.ReLU()(self.tabular_fc1(tabular_data))\n",
    "        tabular_out = nn.ReLU()(self.tabular_fc2(tabular_out))\n",
    "        \n",
    "        combined_features = torch.cat((cnn_features, tabular_out), dim=1)\n",
    "        x = nn.ReLU()(self.fc1(combined_features))\n",
    "        x = self.fc2(x)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f695fe07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:23.770665Z",
     "iopub.status.busy": "2024-06-24T08:17:23.770366Z",
     "iopub.status.idle": "2024-06-24T08:17:24.235364Z",
     "shell.execute_reply": "2024-06-24T08:17:24.234359Z"
    },
    "papermill": {
     "duration": 0.476345,
     "end_time": "2024-06-24T08:17:24.237565",
     "exception": false,
     "start_time": "2024-06-24T08:17:23.761220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0.0182, 0.0074, 0.0244, 0.0938, 0.0339, 0.3374, 0.3572, 0.1275],\n",
       "       device='cuda:0')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "A = np.array([df[cls].sum() for cls in df.columns[1:9]])\n",
    "\n",
    "class_weights = len(df) / A\n",
    "weights_tensor = torch.tensor(class_weights, dtype=torch.float).to(device)\n",
    "\n",
    "normalized_weights_tensor = (1/sum(weights_tensor)) * weights_tensor\n",
    "normalized_weights_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4d210f32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:24.253866Z",
     "iopub.status.busy": "2024-06-24T08:17:24.253599Z",
     "iopub.status.idle": "2024-06-24T08:17:24.904890Z",
     "shell.execute_reply": "2024-06-24T08:17:24.903760Z"
    },
    "papermill": {
     "duration": 0.662263,
     "end_time": "2024-06-24T08:17:24.907504",
     "exception": false,
     "start_time": "2024-06-24T08:17:24.245241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n",
      "100%|██████████| 44.7M/44.7M [00:00<00:00, 163MB/s]\n"
     ]
    }
   ],
   "source": [
    "num_tabular_features = len(df.columns[9:])\n",
    "print(num_tabular_features)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss(weight=normalized_weights_tensor) \n",
    "model = CombinedModel(num_tabular_features).to(device)\n",
    "optimizer = optim.Adam(lr=0.001, params=model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b0a585b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T08:17:24.925881Z",
     "iopub.status.busy": "2024-06-24T08:17:24.925518Z",
     "iopub.status.idle": "2024-06-24T09:11:43.463476Z",
     "shell.execute_reply": "2024-06-24T09:11:43.462598Z"
    },
    "papermill": {
     "duration": 3258.561241,
     "end_time": "2024-06-24T09:11:43.477321",
     "exception": false,
     "start_time": "2024-06-24T08:17:24.916080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/10], Step [0], Loss: 0.0561\n",
      "Epoch [1/10], Step [50], Loss: 0.0392\n",
      "Epoch [1/10], Step [100], Loss: 0.0508\n",
      "Epoch [1/10], Average Training Loss: 0.0455\n",
      "Epoch [1/10], Validation Loss: 0.0836, Validation Accuracy: 22.91%\n",
      "Epoch [2/10], Step [0], Loss: 0.0457\n",
      "Epoch [2/10], Step [50], Loss: 0.0379\n",
      "Epoch [2/10], Step [100], Loss: 0.0372\n",
      "Epoch [2/10], Average Training Loss: 0.0388\n",
      "Epoch [2/10], Validation Loss: 0.0504, Validation Accuracy: 44.66%\n",
      "Epoch [3/10], Step [0], Loss: 0.0377\n",
      "Epoch [3/10], Step [50], Loss: 0.0386\n",
      "Epoch [3/10], Step [100], Loss: 0.0294\n",
      "Epoch [3/10], Average Training Loss: 0.0360\n",
      "Epoch [3/10], Validation Loss: 0.0416, Validation Accuracy: 53.20%\n",
      "Epoch [4/10], Step [0], Loss: 0.0428\n",
      "Epoch [4/10], Step [50], Loss: 0.0395\n",
      "Epoch [4/10], Step [100], Loss: 0.0274\n",
      "Epoch [4/10], Average Training Loss: 0.0343\n",
      "Epoch [4/10], Validation Loss: 0.0459, Validation Accuracy: 38.09%\n",
      "Epoch [5/10], Step [0], Loss: 0.0384\n",
      "Epoch [5/10], Step [50], Loss: 0.0309\n",
      "Epoch [5/10], Step [100], Loss: 0.0359\n",
      "Epoch [5/10], Average Training Loss: 0.0321\n",
      "Epoch [5/10], Validation Loss: 0.0408, Validation Accuracy: 59.92%\n",
      "Epoch [6/10], Step [0], Loss: 0.0261\n",
      "Epoch [6/10], Step [50], Loss: 0.0269\n",
      "Epoch [6/10], Step [100], Loss: 0.0237\n",
      "Epoch [6/10], Average Training Loss: 0.0289\n",
      "Epoch [6/10], Validation Loss: 0.0420, Validation Accuracy: 62.80%\n",
      "Epoch [7/10], Step [0], Loss: 0.0258\n",
      "Epoch [7/10], Step [50], Loss: 0.0237\n",
      "Epoch [7/10], Step [100], Loss: 0.0379\n",
      "Epoch [7/10], Average Training Loss: 0.0256\n",
      "Epoch [7/10], Validation Loss: 0.0379, Validation Accuracy: 62.11%\n",
      "Epoch [8/10], Step [0], Loss: 0.0201\n",
      "Epoch [8/10], Step [50], Loss: 0.0225\n",
      "Epoch [8/10], Step [100], Loss: 0.0321\n",
      "Epoch [8/10], Average Training Loss: 0.0223\n",
      "Epoch [8/10], Validation Loss: 0.0410, Validation Accuracy: 54.67%\n",
      "Epoch [9/10], Step [0], Loss: 0.0239\n",
      "Epoch [9/10], Step [50], Loss: 0.0195\n",
      "Epoch [9/10], Step [100], Loss: 0.0169\n",
      "Epoch [9/10], Average Training Loss: 0.0198\n",
      "Epoch [9/10], Validation Loss: 0.0457, Validation Accuracy: 54.70%\n",
      "Epoch [10/10], Step [0], Loss: 0.0159\n",
      "Epoch [10/10], Step [50], Loss: 0.0190\n",
      "Epoch [10/10], Step [100], Loss: 0.0205\n",
      "Epoch [10/10], Average Training Loss: 0.0209\n",
      "Epoch [10/10], Validation Loss: 0.0427, Validation Accuracy: 57.48%\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 10\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for batch_idx, (images, tabular_data, labels) in enumerate(train_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images, tabular_data)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        if batch_idx % 50 == 0:\n",
    "            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}], Loss: {loss.item():.4f}')\n",
    "    \n",
    "    avg_train_loss = running_loss / len(train_loader)\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Average Training Loss: {avg_train_loss:.4f}')\n",
    "    \n",
    "    # Validation loop\n",
    "    model.eval()\n",
    "    val_running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (images, tabular_data, labels) in enumerate(val_loader):\n",
    "            images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "            outputs = model(images, tabular_data)\n",
    "            val_loss = criterion(outputs, labels)\n",
    "            val_running_loss += val_loss.item()\n",
    "\n",
    "            # Convert one-hot encoded ground truth labels to class indices\n",
    "            true_labels = torch.argmax(labels, dim=1)\n",
    "\n",
    "            # Get the predicted class indices\n",
    "            predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted_labels == true_labels).sum().item()\n",
    "    \n",
    "    avg_val_loss = val_running_loss / len(val_loader)\n",
    "    val_accuracy = 100 * correct / total\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Validation Loss: {avg_val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0e04a8f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T09:11:43.502384Z",
     "iopub.status.busy": "2024-06-24T09:11:43.501703Z",
     "iopub.status.idle": "2024-06-24T09:13:51.789731Z",
     "shell.execute_reply": "2024-06-24T09:13:51.788748Z"
    },
    "papermill": {
     "duration": 128.31641,
     "end_time": "2024-06-24T09:13:51.805510",
     "exception": false,
     "start_time": "2024-06-24T09:11:43.489100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 0.0408, Test Accuracy: 57.31%\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         MEL       0.57      0.48      0.52       870\n",
      "          NV       0.81      0.79      0.80      2127\n",
      "         BCC       0.80      0.14      0.23       664\n",
      "          AK       0.28      0.34      0.31       186\n",
      "         BKL       0.39      0.47      0.43       458\n",
      "          DF       0.12      0.74      0.21        50\n",
      "        VASC       0.12      0.81      0.21        32\n",
      "         SCC       0.19      0.47      0.27       120\n",
      "\n",
      "    accuracy                           0.57      4507\n",
      "   macro avg       0.41      0.53      0.37      4507\n",
      "weighted avg       0.67      0.57      0.58      4507\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "model.eval()\n",
    "test_running_loss = 0.0\n",
    "correct = 0\n",
    "total = 0\n",
    "all_true_labels = []\n",
    "all_predicted_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for idx, (images, tabular_data, labels) in enumerate(test_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        outputs = model(images, tabular_data)\n",
    "        test_loss = criterion(outputs, labels)\n",
    "        test_running_loss += test_loss.item()\n",
    "\n",
    "        true_labels = torch.argmax(labels, dim=1)\n",
    "        predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "        all_true_labels.extend(true_labels.cpu().numpy())\n",
    "        all_predicted_labels.extend(predicted_labels.cpu().numpy())\n",
    "\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted_labels == true_labels).sum().item()\n",
    "\n",
    "avg_test_loss = test_running_loss / len(test_loader)\n",
    "test_accuracy = 100 * correct / total\n",
    "print(f'Test Loss: {avg_test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%')\n",
    "\n",
    "# Generate classification report\n",
    "class_names = ['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']\n",
    "report = classification_report(all_true_labels, all_predicted_labels, target_names=class_names)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d3642c95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T09:13:51.831942Z",
     "iopub.status.busy": "2024-06-24T09:13:51.831274Z",
     "iopub.status.idle": "2024-06-24T09:13:51.841231Z",
     "shell.execute_reply": "2024-06-24T09:13:51.840385Z"
    },
    "papermill": {
     "duration": 0.025585,
     "end_time": "2024-06-24T09:13:51.843197",
     "exception": false,
     "start_time": "2024-06-24T09:13:51.817612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 420,  233,    4,   27,  115,   16,   12,   43],\n",
       "       [ 173, 1673,   10,    4,   79,  105,   69,   14],\n",
       "       [  38,   53,   90,   92,   76,  115,   78,  122],\n",
       "       [  10,    8,    4,   64,   48,    8,    7,   37],\n",
       "       [  85,   79,    2,   23,  216,   15,   15,   23],\n",
       "       [   1,    4,    0,    2,    2,   37,    1,    3],\n",
       "       [   2,    3,    0,    0,    0,    1,   26,    0],\n",
       "       [   6,    5,    2,   15,   16,   12,    7,   57]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(all_true_labels, all_predicted_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bb696b8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T09:13:51.870299Z",
     "iopub.status.busy": "2024-06-24T09:13:51.870050Z",
     "iopub.status.idle": "2024-06-24T09:13:51.876154Z",
     "shell.execute_reply": "2024-06-24T09:13:51.875296Z"
    },
    "papermill": {
     "duration": 0.021885,
     "end_time": "2024-06-24T09:13:51.878144",
     "exception": false,
     "start_time": "2024-06-24T09:13:51.856259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #Test set on image input (64*64*3 with weights frequency_based and batch size 128): 67.34%\n",
    "# Test Loss: 1.3568, Test Accuracy: 69.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.57      0.59      0.58       870\n",
    "#           NV       0.81      0.87      0.84      2127\n",
    "#          BCC       0.60      0.82      0.69       664\n",
    "#           AK       0.54      0.23      0.32       186\n",
    "#          BKL       0.54      0.24      0.33       458\n",
    "#           DF       0.86      0.12      0.21        50\n",
    "#         VASC       0.41      0.69      0.51        32\n",
    "#          SCC       0.34      0.24      0.28       120\n",
    "\n",
    "#     accuracy                           0.69      4507\n",
    "#    macro avg       0.58      0.48      0.47      4507\n",
    "# weighted avg       0.68      0.69      0.67      4507\n",
    "\n",
    "# #Test set on image input (256*256*3 with weights proportionaly-inverse, normalized and batch size 128):\n",
    "# Test Loss: 0.0378, Test Accuracy: 54.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.58      0.41      0.48       870\n",
    "#           NV       0.91      0.61      0.73      2127\n",
    "#          BCC       0.63      0.53      0.58       664\n",
    "#           AK       0.23      0.66      0.34       186\n",
    "#          BKL       0.25      0.47      0.33       458\n",
    "#           DF       0.20      0.50      0.28        50\n",
    "#         VASC       0.19      0.91      0.31        32\n",
    "#          SCC       0.19      0.34      0.24       120\n",
    "\n",
    "#     accuracy                           0.54      4507\n",
    "#    macro avg       0.40      0.55      0.41      4507\n",
    "# weighted avg       0.68      0.54      0.58      4507\n",
    "\n",
    "\n",
    "# #Test set on image input (256*256*3 with no weights and batch size 128): \n",
    "# Test Loss: 1.4176, Test Accuracy: 70.42%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.67      0.50      0.57       870\n",
    "#           NV       0.74      0.94      0.83      2127\n",
    "#          BCC       0.69      0.77      0.73       664\n",
    "#           AK       0.42      0.32      0.36       186\n",
    "#          BKL       0.66      0.27      0.38       458\n",
    "#           DF       0.62      0.10      0.17        50\n",
    "#         VASC       0.68      0.72      0.70        32\n",
    "#          SCC       0.44      0.19      0.27       120\n",
    "\n",
    "#     accuracy                           0.70      4507\n",
    "#    macro avg       0.62      0.47      0.50      4507\n",
    "# weighted avg       0.69      0.70      0.68      4507\n",
    "\n",
    "\n",
    "# 16*16:\n",
    "#     Test Loss: 0.9945, Test Accuracy: 65.14%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.59      0.48      0.53       870\n",
    "#           NV       0.78      0.90      0.83      2127\n",
    "#          BCC       0.61      0.53      0.57       664\n",
    "#           AK       0.23      0.28      0.26       186\n",
    "#          BKL       0.45      0.35      0.40       458\n",
    "#           DF       0.50      0.04      0.07        50\n",
    "#         VASC       0.83      0.31      0.45        32\n",
    "#          SCC       0.17      0.23      0.20       120\n",
    "\n",
    "#     accuracy                           0.65      4507\n",
    "#    macro avg       0.52      0.39      0.41      4507\n",
    "# weighted avg       0.64      0.65      0.64      4507\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4c671a6",
   "metadata": {
    "papermill": {
     "duration": 0.012243,
     "end_time": "2024-06-24T09:13:51.902860",
     "exception": false,
     "start_time": "2024-06-24T09:13:51.890617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d0dbcaf",
   "metadata": {
    "papermill": {
     "duration": 0.011978,
     "end_time": "2024-06-24T09:13:51.927145",
     "exception": false,
     "start_time": "2024-06-24T09:13:51.915167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 679322,
     "sourceId": 1193409,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3400.576512,
   "end_time": "2024-06-24T09:13:54.146223",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-24T08:17:13.569711",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
