{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7150a6bd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:37.188834Z",
     "iopub.status.busy": "2024-06-24T15:27:37.187850Z",
     "iopub.status.idle": "2024-06-24T15:27:43.303712Z",
     "shell.execute_reply": "2024-06-24T15:27:43.302699Z"
    },
    "papermill": {
     "duration": 6.127547,
     "end_time": "2024-06-24T15:27:43.306296",
     "exception": false,
     "start_time": "2024-06-24T15:27:37.178749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torchvision import models, transforms\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from PIL import Image\n",
    "import torch\n",
    "import os\n",
    "import pandas as pd\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "412a2929",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.323644Z",
     "iopub.status.busy": "2024-06-24T15:27:43.322655Z",
     "iopub.status.idle": "2024-06-24T15:27:43.542476Z",
     "shell.execute_reply": "2024-06-24T15:27:43.541496Z"
    },
    "papermill": {
     "duration": 0.231561,
     "end_time": "2024-06-24T15:27:43.545364",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.313803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_ground_truth = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_GroundTruth.csv\")\n",
    "df_metadata = pd.read_csv(\"/kaggle/input/isic-2019/ISIC_2019_Training_Metadata.csv\")\n",
    "df = pd.merge(df_ground_truth, df_metadata, on='image', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7d784701",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.566779Z",
     "iopub.status.busy": "2024-06-24T15:27:43.565984Z",
     "iopub.status.idle": "2024-06-24T15:27:43.570910Z",
     "shell.execute_reply": "2024-06-24T15:27:43.569899Z"
    },
    "papermill": {
     "duration": 0.017202,
     "end_time": "2024-06-24T15:27:43.573038",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.555836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_dir = \"/kaggle/input/isic-2019/ISIC_2019_Training_Input/ISIC_2019_Training_Input\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ac342974",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.590028Z",
     "iopub.status.busy": "2024-06-24T15:27:43.589247Z",
     "iopub.status.idle": "2024-06-24T15:27:43.598163Z",
     "shell.execute_reply": "2024-06-24T15:27:43.597320Z"
    },
    "papermill": {
     "duration": 0.019482,
     "end_time": "2024-06-24T15:27:43.600296",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.580814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"UNK\", \"lesion_id\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "313d18de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.617741Z",
     "iopub.status.busy": "2024-06-24T15:27:43.616753Z",
     "iopub.status.idle": "2024-06-24T15:27:43.650646Z",
     "shell.execute_reply": "2024-06-24T15:27:43.649628Z"
    },
    "papermill": {
     "duration": 0.044991,
     "end_time": "2024-06-24T15:27:43.652862",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.607871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25256</th>\n",
       "      <td>ISIC_0073141</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "25256  ISIC_0073141  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        45.0   \n",
       "\n",
       "      anatom_site_general     sex  \n",
       "25256      anterior torso  female  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"image\"] == \"ISIC_0073141\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "13b4997d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.669782Z",
     "iopub.status.busy": "2024-06-24T15:27:43.669422Z",
     "iopub.status.idle": "2024-06-24T15:27:43.695951Z",
     "shell.execute_reply": "2024-06-24T15:27:43.694946Z"
    },
    "papermill": {
     "duration": 0.037308,
     "end_time": "2024-06-24T15:27:43.698133",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.660825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ISIC_0000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ISIC_0000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ISIC_0000002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ISIC_0000003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ISIC_0000004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>posterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25326</th>\n",
       "      <td>ISIC_0073247</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>head/neck</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25327</th>\n",
       "      <td>ISIC_0073248</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>anterior torso</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25328</th>\n",
       "      <td>ISIC_0073249</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>lower extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25329</th>\n",
       "      <td>ISIC_0073251</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>palms/soles</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25330</th>\n",
       "      <td>ISIC_0073254</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>upper extremity</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25331 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "0      ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "1      ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "2      ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        60.0   \n",
       "3      ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        30.0   \n",
       "4      ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        80.0   \n",
       "...             ...  ...  ...  ...  ...  ...  ...   ...  ...         ...   \n",
       "25326  ISIC_0073247  0.0  0.0  1.0  0.0  0.0  0.0   0.0  0.0        85.0   \n",
       "25327  ISIC_0073248  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0        65.0   \n",
       "25328  ISIC_0073249  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0        70.0   \n",
       "25329  ISIC_0073251  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0        55.0   \n",
       "25330  ISIC_0073254  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0        50.0   \n",
       "\n",
       "      anatom_site_general     sex  \n",
       "0          anterior torso  female  \n",
       "1          anterior torso  female  \n",
       "2         upper extremity  female  \n",
       "3         upper extremity    male  \n",
       "4         posterior torso    male  \n",
       "...                   ...     ...  \n",
       "25326           head/neck  female  \n",
       "25327      anterior torso    male  \n",
       "25328     lower extremity    male  \n",
       "25329         palms/soles  female  \n",
       "25330     upper extremity    male  \n",
       "\n",
       "[25331 rows x 12 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "753df14a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.715995Z",
     "iopub.status.busy": "2024-06-24T15:27:43.715239Z",
     "iopub.status.idle": "2024-06-24T15:27:43.723776Z",
     "shell.execute_reply": "2024-06-24T15:27:43.722803Z"
    },
    "papermill": {
     "duration": 0.019671,
     "end_time": "2024-06-24T15:27:43.725793",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.706122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['anterior torso', 'upper extremity', 'posterior torso',\n",
       "       'lower extremity', nan, 'lateral torso', 'head/neck',\n",
       "       'palms/soles', 'oral/genital'], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"anatom_site_general\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3033850f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.744163Z",
     "iopub.status.busy": "2024-06-24T15:27:43.743210Z",
     "iopub.status.idle": "2024-06-24T15:27:43.753099Z",
     "shell.execute_reply": "2024-06-24T15:27:43.752058Z"
    },
    "papermill": {
     "duration": 0.022599,
     "end_time": "2024-06-24T15:27:43.756491",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.733892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/290600658.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['age_approx'].fillna(median_age, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "median_age = df['age_approx'].median()\n",
    "df['age_approx'].fillna(median_age, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0566508e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.781649Z",
     "iopub.status.busy": "2024-06-24T15:27:43.780865Z",
     "iopub.status.idle": "2024-06-24T15:27:43.800881Z",
     "shell.execute_reply": "2024-06-24T15:27:43.799911Z"
    },
    "papermill": {
     "duration": 0.033805,
     "end_time": "2024-06-24T15:27:43.803245",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.769440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8759c902",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:43.822587Z",
     "iopub.status.busy": "2024-06-24T15:27:43.821451Z",
     "iopub.status.idle": "2024-06-24T15:27:44.803530Z",
     "shell.execute_reply": "2024-06-24T15:27:44.802386Z"
    },
    "papermill": {
     "duration": 0.994444,
     "end_time": "2024-06-24T15:27:44.805926",
     "exception": false,
     "start_time": "2024-06-24T15:27:43.811482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "one_hot = pd.get_dummies(df[[\"anatom_site_general\", \"sex\"]], drop_first=False)\n",
    "\n",
    "df = df.drop([\"anatom_site_general\", \"sex\"], axis=1)\n",
    "df = pd.concat([df, one_hot], axis=1)\n",
    "\n",
    "bool_columns = df.select_dtypes(include=['bool']).columns\n",
    "df[bool_columns] = df[bool_columns].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7749caa4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:44.824744Z",
     "iopub.status.busy": "2024-06-24T15:27:44.823699Z",
     "iopub.status.idle": "2024-06-24T15:27:44.856115Z",
     "shell.execute_reply": "2024-06-24T15:27:44.855065Z"
    },
    "papermill": {
     "duration": 0.044056,
     "end_time": "2024-06-24T15:27:44.858454",
     "exception": false,
     "start_time": "2024-06-24T15:27:44.814398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_anterior torso</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_female</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2915</th>\n",
       "      <td>ISIC_0024318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2927</th>\n",
       "      <td>ISIC_0024330</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2983</th>\n",
       "      <td>ISIC_0024386</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2993</th>\n",
       "      <td>ISIC_0024396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3150</th>\n",
       "      <td>ISIC_0024553</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25145</th>\n",
       "      <td>ISIC_0072970</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25238</th>\n",
       "      <td>ISIC_0073112</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25256</th>\n",
       "      <td>ISIC_0073141</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25286</th>\n",
       "      <td>ISIC_0073189</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25287</th>\n",
       "      <td>ISIC_0073193</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>235 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  age_approx  \\\n",
       "2915   ISIC_0024318  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        65.0   \n",
       "2927   ISIC_0024330  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        40.0   \n",
       "2983   ISIC_0024386  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        40.0   \n",
       "2993   ISIC_0024396  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        65.0   \n",
       "3150   ISIC_0024553  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        50.0   \n",
       "...             ...  ...  ...  ...  ...  ...  ...   ...  ...         ...   \n",
       "25145  ISIC_0072970  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        60.0   \n",
       "25238  ISIC_0073112  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        85.0   \n",
       "25256  ISIC_0073141  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        45.0   \n",
       "25286  ISIC_0073189  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        70.0   \n",
       "25287  ISIC_0073193  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0        35.0   \n",
       "\n",
       "       anatom_site_general_anterior torso  anatom_site_general_head/neck  \\\n",
       "2915                                    0                              0   \n",
       "2927                                    0                              0   \n",
       "2983                                    0                              0   \n",
       "2993                                    0                              0   \n",
       "3150                                    0                              0   \n",
       "...                                   ...                            ...   \n",
       "25145                                   0                              0   \n",
       "25238                                   1                              0   \n",
       "25256                                   1                              0   \n",
       "25286                                   0                              0   \n",
       "25287                                   1                              0   \n",
       "\n",
       "       anatom_site_general_lateral torso  anatom_site_general_lower extremity  \\\n",
       "2915                                   0                                    1   \n",
       "2927                                   0                                    1   \n",
       "2983                                   0                                    1   \n",
       "2993                                   0                                    1   \n",
       "3150                                   0                                    0   \n",
       "...                                  ...                                  ...   \n",
       "25145                                  0                                    1   \n",
       "25238                                  0                                    0   \n",
       "25256                                  0                                    0   \n",
       "25286                                  0                                    0   \n",
       "25287                                  0                                    0   \n",
       "\n",
       "       anatom_site_general_oral/genital  anatom_site_general_palms/soles  \\\n",
       "2915                                  0                                0   \n",
       "2927                                  0                                0   \n",
       "2983                                  0                                0   \n",
       "2993                                  0                                0   \n",
       "3150                                  0                                0   \n",
       "...                                 ...                              ...   \n",
       "25145                                 0                                0   \n",
       "25238                                 0                                0   \n",
       "25256                                 0                                0   \n",
       "25286                                 0                                0   \n",
       "25287                                 0                                0   \n",
       "\n",
       "       anatom_site_general_posterior torso  \\\n",
       "2915                                     0   \n",
       "2927                                     0   \n",
       "2983                                     0   \n",
       "2993                                     0   \n",
       "3150                                     0   \n",
       "...                                    ...   \n",
       "25145                                    0   \n",
       "25238                                    0   \n",
       "25256                                    0   \n",
       "25286                                    0   \n",
       "25287                                    0   \n",
       "\n",
       "       anatom_site_general_upper extremity  sex_female  sex_male  \n",
       "2915                                     0           1         0  \n",
       "2927                                     0           0         1  \n",
       "2983                                     0           1         0  \n",
       "2993                                     0           1         0  \n",
       "3150                                     1           1         0  \n",
       "...                                    ...         ...       ...  \n",
       "25145                                    0           1         0  \n",
       "25238                                    0           1         0  \n",
       "25256                                    0           1         0  \n",
       "25286                                    1           0         1  \n",
       "25287                                    0           0         1  \n",
       "\n",
       "[235 rows x 20 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"DF\"] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "371ebc4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:44.877780Z",
     "iopub.status.busy": "2024-06-24T15:27:44.876908Z",
     "iopub.status.idle": "2024-06-24T15:27:44.976781Z",
     "shell.execute_reply": "2024-06-24T15:27:44.975488Z"
    },
    "papermill": {
     "duration": 0.112129,
     "end_time": "2024-06-24T15:27:44.979245",
     "exception": false,
     "start_time": "2024-06-24T15:27:44.867116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: 14419\n",
      "Validation set size: 3605\n",
      "Test set size: 4507\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_val_df, test_df = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "# Then, split the training+validation set into training and validation sets\n",
    "train_df, val_df = train_test_split(train_val_df, test_size=0.2, random_state=42)\n",
    "\n",
    "print(f\"Train set size: {len(train_df)}\")\n",
    "print(f\"Validation set size: {len(val_df)}\")\n",
    "print(f\"Test set size: {len(test_df)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a0b5d116",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:44.999118Z",
     "iopub.status.busy": "2024-06-24T15:27:44.998326Z",
     "iopub.status.idle": "2024-06-24T15:27:45.031867Z",
     "shell.execute_reply": "2024-06-24T15:27:45.030790Z"
    },
    "papermill": {
     "duration": 0.045724,
     "end_time": "2024-06-24T15:27:45.034054",
     "exception": false,
     "start_time": "2024-06-24T15:27:44.988330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>MEL</th>\n",
       "      <th>NV</th>\n",
       "      <th>BCC</th>\n",
       "      <th>AK</th>\n",
       "      <th>BKL</th>\n",
       "      <th>DF</th>\n",
       "      <th>VASC</th>\n",
       "      <th>SCC</th>\n",
       "      <th>age_approx</th>\n",
       "      <th>anatom_site_general_anterior torso</th>\n",
       "      <th>anatom_site_general_head/neck</th>\n",
       "      <th>anatom_site_general_lateral torso</th>\n",
       "      <th>anatom_site_general_lower extremity</th>\n",
       "      <th>anatom_site_general_oral/genital</th>\n",
       "      <th>anatom_site_general_palms/soles</th>\n",
       "      <th>anatom_site_general_posterior torso</th>\n",
       "      <th>anatom_site_general_upper extremity</th>\n",
       "      <th>sex_female</th>\n",
       "      <th>sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16634</th>\n",
       "      <td>ISIC_0059427</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23936</th>\n",
       "      <td>ISIC_0071042</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11033</th>\n",
       "      <td>ISIC_0032436</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2619</th>\n",
       "      <td>ISIC_0015109_downsampled</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3629</th>\n",
       "      <td>ISIC_0025032</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22197</th>\n",
       "      <td>ISIC_0068305</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12019</th>\n",
       "      <td>ISIC_0033422</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19211</th>\n",
       "      <td>ISIC_0063568</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18928</th>\n",
       "      <td>ISIC_0063094</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16725</th>\n",
       "      <td>ISIC_0059570</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14419 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  \\\n",
       "16634              ISIC_0059427  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "23936              ISIC_0071042  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "11033              ISIC_0032436  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "2619   ISIC_0015109_downsampled  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "3629               ISIC_0025032  0.0  0.0  0.0  0.0  1.0  0.0   0.0  0.0   \n",
       "...                         ...  ...  ...  ...  ...  ...  ...   ...  ...   \n",
       "22197              ISIC_0068305  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "12019              ISIC_0033422  0.0  0.0  0.0  0.0  0.0  1.0   0.0  0.0   \n",
       "19211              ISIC_0063568  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "18928              ISIC_0063094  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0   \n",
       "16725              ISIC_0059570  0.0  0.0  1.0  0.0  0.0  0.0   0.0  0.0   \n",
       "\n",
       "       age_approx  anatom_site_general_anterior torso  \\\n",
       "16634        85.0                                   0   \n",
       "23936         0.0                                   0   \n",
       "11033        50.0                                   0   \n",
       "2619         40.0                                   0   \n",
       "3629         75.0                                   0   \n",
       "...           ...                                 ...   \n",
       "22197        15.0                                   1   \n",
       "12019        45.0                                   0   \n",
       "19211        50.0                                   0   \n",
       "18928        60.0                                   1   \n",
       "16725        50.0                                   0   \n",
       "\n",
       "       anatom_site_general_head/neck  anatom_site_general_lateral torso  \\\n",
       "16634                              1                                  0   \n",
       "23936                              0                                  0   \n",
       "11033                              0                                  0   \n",
       "2619                               0                                  0   \n",
       "3629                               0                                  0   \n",
       "...                              ...                                ...   \n",
       "22197                              0                                  0   \n",
       "12019                              0                                  0   \n",
       "19211                              0                                  0   \n",
       "18928                              0                                  0   \n",
       "16725                              1                                  0   \n",
       "\n",
       "       anatom_site_general_lower extremity  anatom_site_general_oral/genital  \\\n",
       "16634                                    0                                 0   \n",
       "23936                                    0                                 0   \n",
       "11033                                    0                                 0   \n",
       "2619                                     0                                 0   \n",
       "3629                                     0                                 0   \n",
       "...                                    ...                               ...   \n",
       "22197                                    0                                 0   \n",
       "12019                                    1                                 0   \n",
       "19211                                    1                                 0   \n",
       "18928                                    0                                 0   \n",
       "16725                                    0                                 0   \n",
       "\n",
       "       anatom_site_general_palms/soles  anatom_site_general_posterior torso  \\\n",
       "16634                                0                                    0   \n",
       "23936                                1                                    0   \n",
       "11033                                0                                    1   \n",
       "2619                                 0                                    1   \n",
       "3629                                 0                                    1   \n",
       "...                                ...                                  ...   \n",
       "22197                                0                                    0   \n",
       "12019                                0                                    0   \n",
       "19211                                0                                    0   \n",
       "18928                                0                                    0   \n",
       "16725                                0                                    0   \n",
       "\n",
       "       anatom_site_general_upper extremity  sex_female  sex_male  \n",
       "16634                                    0           0         1  \n",
       "23936                                    0           1         0  \n",
       "11033                                    0           1         0  \n",
       "2619                                     0           0         1  \n",
       "3629                                     0           1         0  \n",
       "...                                    ...         ...       ...  \n",
       "22197                                    0           0         1  \n",
       "12019                                    0           0         1  \n",
       "19211                                    0           0         1  \n",
       "18928                                    0           0         1  \n",
       "16725                                    0           0         1  \n",
       "\n",
       "[14419 rows x 20 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b6b402c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:45.054412Z",
     "iopub.status.busy": "2024-06-24T15:27:45.054047Z",
     "iopub.status.idle": "2024-06-24T15:27:45.062210Z",
     "shell.execute_reply": "2024-06-24T15:27:45.061201Z"
    },
    "papermill": {
     "duration": 0.020566,
     "end_time": "2024-06-24T15:27:45.064123",
     "exception": false,
     "start_time": "2024-06-24T15:27:45.043557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MelanomaDataset(Dataset):\n",
    "    def __init__(self, df, img_dir, transform):\n",
    "        self.img_dir = img_dir\n",
    "        self.df = df\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img_name = os.path.join(self.img_dir, self.df.iloc[idx, 0] + '.jpg')  # Assuming .jpg extension\n",
    "        image = Image.open(img_name)\n",
    "        if transform:\n",
    "            image = self.transform(image)\n",
    "        values = np.array(self.df.iloc[idx, 9:].values, dtype=np.float32)\n",
    "        \n",
    "        characteristics = torch.tensor(values, dtype=torch.float32)\n",
    "        label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n",
    "        return image, characteristics, label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2f1965dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:45.084412Z",
     "iopub.status.busy": "2024-06-24T15:27:45.084071Z",
     "iopub.status.idle": "2024-06-24T15:27:45.091248Z",
     "shell.execute_reply": "2024-06-24T15:27:45.090397Z"
    },
    "papermill": {
     "duration": 0.019559,
     "end_time": "2024-06-24T15:27:45.093100",
     "exception": false,
     "start_time": "2024-06-24T15:27:45.073541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchvision.transforms as transforms\n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),  # Resize to match input size of the model\n",
    "    transforms.RandomHorizontalFlip(p=0.5),  # Randomly flip the image horizontally\n",
    "    transforms.RandomRotation(degrees=15),  # Randomly rotate the image by up to 15 degrees\n",
    "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),  # Randomly change the brightness, contrast, saturation, and hue\n",
    "    transforms.RandomResizedCrop(size=(224, 224), scale=(0.8, 1.0)),  # Randomly crop the image\n",
    "    transforms.ToTensor(),          # Convert to tensor\n",
    "    transforms.Normalize(mean=[0.5], std=[0.5]),  # Normalize the tensor\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "314d44d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:45.112689Z",
     "iopub.status.busy": "2024-06-24T15:27:45.112331Z",
     "iopub.status.idle": "2024-06-24T15:27:45.118426Z",
     "shell.execute_reply": "2024-06-24T15:27:45.117392Z"
    },
    "papermill": {
     "duration": 0.018348,
     "end_time": "2024-06-24T15:27:45.120541",
     "exception": false,
     "start_time": "2024-06-24T15:27:45.102193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = MelanomaDataset(train_df, images_dir, transform)\n",
    "val_dataset = MelanomaDataset(val_df, images_dir, transform)\n",
    "test_dataset = MelanomaDataset(test_df, images_dir, transform)\n",
    "\n",
    "# Create DataLoader for each dataset\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=128, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "98661c48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:45.141258Z",
     "iopub.status.busy": "2024-06-24T15:27:45.140627Z",
     "iopub.status.idle": "2024-06-24T15:27:45.149136Z",
     "shell.execute_reply": "2024-06-24T15:27:45.148209Z"
    },
    "papermill": {
     "duration": 0.021277,
     "end_time": "2024-06-24T15:27:45.151281",
     "exception": false,
     "start_time": "2024-06-24T15:27:45.130004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CombinedModel(nn.Module):\n",
    "    def __init__(self, num_tabular_features):\n",
    "        super(CombinedModel, self).__init__()\n",
    "        self.cnn = models.resnet18(weights=True)\n",
    "        self.cnn.fc = nn.Identity()  # Remove the final classification layer\n",
    "        \n",
    "        self.tabular_fc1 = nn.Linear(num_tabular_features, 128)\n",
    "        self.tabular_fc2 = nn.Linear(128, 64)\n",
    "        \n",
    "        self.fc1 = nn.Linear(512 + 64, 128)  \n",
    "        self.fc2 = nn.Linear(128, 8)  \n",
    "\n",
    "    def forward(self, image, tabular_data):\n",
    "        cnn_features = self.cnn(image)\n",
    "        \n",
    "        tabular_out = nn.ReLU()(self.tabular_fc1(tabular_data))\n",
    "        tabular_out = nn.ReLU()(self.tabular_fc2(tabular_out))\n",
    "        \n",
    "        combined_features = torch.cat((cnn_features, tabular_out), dim=1)\n",
    "        x = nn.ReLU()(self.fc1(combined_features))\n",
    "        x = self.fc2(x)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b21b44a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:45.172426Z",
     "iopub.status.busy": "2024-06-24T15:27:45.172035Z",
     "iopub.status.idle": "2024-06-24T15:27:45.639180Z",
     "shell.execute_reply": "2024-06-24T15:27:45.638242Z"
    },
    "papermill": {
     "duration": 0.480532,
     "end_time": "2024-06-24T15:27:45.641362",
     "exception": false,
     "start_time": "2024-06-24T15:27:45.160830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0.0182, 0.0074, 0.0244, 0.0938, 0.0339, 0.3374, 0.3572, 0.1275],\n",
       "       device='cuda:0')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "A = np.array([df[cls].sum() for cls in df.columns[1:9]])\n",
    "\n",
    "class_weights = len(df) / A\n",
    "weights_tensor = torch.tensor(class_weights, dtype=torch.float).to(device)\n",
    "\n",
    "normalized_weights_tensor = (1/sum(weights_tensor)) * weights_tensor\n",
    "normalized_weights_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4e20a19d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:45.662935Z",
     "iopub.status.busy": "2024-06-24T15:27:45.662289Z",
     "iopub.status.idle": "2024-06-24T15:27:46.423393Z",
     "shell.execute_reply": "2024-06-24T15:27:46.422539Z"
    },
    "papermill": {
     "duration": 0.774434,
     "end_time": "2024-06-24T15:27:46.425825",
     "exception": false,
     "start_time": "2024-06-24T15:27:45.651391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n",
      "100%|██████████| 44.7M/44.7M [00:00<00:00, 124MB/s]\n"
     ]
    }
   ],
   "source": [
    "num_tabular_features = len(df.columns[9:])\n",
    "print(num_tabular_features)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()# weight=normalized_weights_tensor) \n",
    "model = CombinedModel(num_tabular_features).to(device)\n",
    "optimizer = optim.Adam(lr=0.001, params=model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7e92547b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T15:27:46.448832Z",
     "iopub.status.busy": "2024-06-24T15:27:46.448060Z",
     "iopub.status.idle": "2024-06-24T16:46:20.190708Z",
     "shell.execute_reply": "2024-06-24T16:46:20.189781Z"
    },
    "papermill": {
     "duration": 4713.770021,
     "end_time": "2024-06-24T16:46:20.206500",
     "exception": false,
     "start_time": "2024-06-24T15:27:46.436479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/10], Step [0], Loss: 1.8924\n",
      "Epoch [1/10], Step [50], Loss: 0.9563\n",
      "Epoch [1/10], Step [100], Loss: 0.9624\n",
      "Epoch [1/10], Average Training Loss: 1.0618\n",
      "Epoch [1/10], Validation Loss: 1.1299, Validation Accuracy: 61.47%\n",
      "Epoch [2/10], Step [0], Loss: 0.9001\n",
      "Epoch [2/10], Step [50], Loss: 0.9371\n",
      "Epoch [2/10], Step [100], Loss: 0.9469\n",
      "Epoch [2/10], Average Training Loss: 0.9456\n",
      "Epoch [2/10], Validation Loss: 1.0758, Validation Accuracy: 59.78%\n",
      "Epoch [3/10], Step [0], Loss: 0.9753\n",
      "Epoch [3/10], Step [50], Loss: 0.8525\n",
      "Epoch [3/10], Step [100], Loss: 0.9622\n",
      "Epoch [3/10], Average Training Loss: 0.8857\n",
      "Epoch [3/10], Validation Loss: 1.0010, Validation Accuracy: 65.16%\n",
      "Epoch [4/10], Step [0], Loss: 0.8564\n",
      "Epoch [4/10], Step [50], Loss: 0.9624\n",
      "Epoch [4/10], Step [100], Loss: 0.8837\n",
      "Epoch [4/10], Average Training Loss: 0.8467\n",
      "Epoch [4/10], Validation Loss: 0.9473, Validation Accuracy: 67.79%\n",
      "Epoch [5/10], Step [0], Loss: 0.5500\n",
      "Epoch [5/10], Step [50], Loss: 0.8136\n",
      "Epoch [5/10], Step [100], Loss: 0.9207\n",
      "Epoch [5/10], Average Training Loss: 0.8039\n",
      "Epoch [5/10], Validation Loss: 0.9550, Validation Accuracy: 64.99%\n",
      "Epoch [6/10], Step [0], Loss: 0.8721\n",
      "Epoch [6/10], Step [50], Loss: 0.8703\n",
      "Epoch [6/10], Step [100], Loss: 0.7485\n",
      "Epoch [6/10], Average Training Loss: 0.7728\n",
      "Epoch [6/10], Validation Loss: 0.8950, Validation Accuracy: 67.96%\n",
      "Epoch [7/10], Step [0], Loss: 0.7754\n",
      "Epoch [7/10], Step [50], Loss: 0.8338\n",
      "Epoch [7/10], Step [100], Loss: 0.7674\n",
      "Epoch [7/10], Average Training Loss: 0.7449\n",
      "Epoch [7/10], Validation Loss: 0.8914, Validation Accuracy: 69.82%\n",
      "Epoch [8/10], Step [0], Loss: 0.6639\n",
      "Epoch [8/10], Step [50], Loss: 0.7315\n",
      "Epoch [8/10], Step [100], Loss: 0.6159\n",
      "Epoch [8/10], Average Training Loss: 0.7224\n",
      "Epoch [8/10], Validation Loss: 0.8241, Validation Accuracy: 71.12%\n",
      "Epoch [9/10], Step [0], Loss: 0.5955\n",
      "Epoch [9/10], Step [50], Loss: 0.5817\n",
      "Epoch [9/10], Step [100], Loss: 0.7611\n",
      "Epoch [9/10], Average Training Loss: 0.7036\n",
      "Epoch [9/10], Validation Loss: 0.8316, Validation Accuracy: 69.79%\n",
      "Epoch [10/10], Step [0], Loss: 0.7246\n",
      "Epoch [10/10], Step [50], Loss: 0.6667\n",
      "Epoch [10/10], Step [100], Loss: 0.6950\n",
      "Epoch [10/10], Average Training Loss: 0.6640\n",
      "Epoch [10/10], Validation Loss: 0.9032, Validation Accuracy: 69.32%\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 10\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for batch_idx, (images, tabular_data, labels) in enumerate(train_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images, tabular_data)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        if batch_idx % 50 == 0:\n",
    "            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}], Loss: {loss.item():.4f}')\n",
    "    \n",
    "    avg_train_loss = running_loss / len(train_loader)\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Average Training Loss: {avg_train_loss:.4f}')\n",
    "    \n",
    "    # Validation loop\n",
    "    model.eval()\n",
    "    val_running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (images, tabular_data, labels) in enumerate(val_loader):\n",
    "            images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "            outputs = model(images, tabular_data)\n",
    "            val_loss = criterion(outputs, labels)\n",
    "            val_running_loss += val_loss.item()\n",
    "\n",
    "            # Convert one-hot encoded ground truth labels to class indices\n",
    "            true_labels = torch.argmax(labels, dim=1)\n",
    "\n",
    "            # Get the predicted class indices\n",
    "            predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted_labels == true_labels).sum().item()\n",
    "    \n",
    "    avg_val_loss = val_running_loss / len(val_loader)\n",
    "    val_accuracy = 100 * correct / total\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Validation Loss: {avg_val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "22660451",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:46:20.234842Z",
     "iopub.status.busy": "2024-06-24T16:46:20.234527Z",
     "iopub.status.idle": "2024-06-24T16:49:00.329693Z",
     "shell.execute_reply": "2024-06-24T16:49:00.328736Z"
    },
    "papermill": {
     "duration": 160.125498,
     "end_time": "2024-06-24T16:49:00.345524",
     "exception": false,
     "start_time": "2024-06-24T16:46:20.220026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/2271171968.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label = torch.tensor(self.df.iloc[idx, 1:9], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 0.9086, Test Accuracy: 68.85%\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         MEL       0.62      0.45      0.52       848\n",
      "          NV       0.72      0.96      0.82      2172\n",
      "         BCC       0.77      0.60      0.68       654\n",
      "          AK       0.43      0.24      0.31       173\n",
      "         BKL       0.48      0.35      0.40       444\n",
      "          DF       0.67      0.13      0.21        47\n",
      "        VASC       0.62      0.88      0.73        41\n",
      "         SCC       0.42      0.06      0.11       128\n",
      "\n",
      "    accuracy                           0.69      4507\n",
      "   macro avg       0.59      0.46      0.47      4507\n",
      "weighted avg       0.67      0.69      0.66      4507\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "model.eval()\n",
    "test_running_loss = 0.0\n",
    "correct = 0\n",
    "total = 0\n",
    "all_true_labels = []\n",
    "all_predicted_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for idx, (images, tabular_data, labels) in enumerate(test_loader):\n",
    "        images, tabular_data, labels = images.to(device), tabular_data.to(device), labels.to(device)\n",
    "        outputs = model(images, tabular_data)\n",
    "        test_loss = criterion(outputs, labels)\n",
    "        test_running_loss += test_loss.item()\n",
    "\n",
    "        true_labels = torch.argmax(labels, dim=1)\n",
    "        predicted_labels = torch.argmax(outputs, dim=1)\n",
    "\n",
    "        all_true_labels.extend(true_labels.cpu().numpy())\n",
    "        all_predicted_labels.extend(predicted_labels.cpu().numpy())\n",
    "\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted_labels == true_labels).sum().item()\n",
    "\n",
    "avg_test_loss = test_running_loss / len(test_loader)\n",
    "test_accuracy = 100 * correct / total\n",
    "print(f'Test Loss: {avg_test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%')\n",
    "\n",
    "# Generate classification report\n",
    "class_names = ['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']\n",
    "report = classification_report(all_true_labels, all_predicted_labels, target_names=class_names)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e3656909",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:49:00.374183Z",
     "iopub.status.busy": "2024-06-24T16:49:00.373874Z",
     "iopub.status.idle": "2024-06-24T16:49:01.032404Z",
     "shell.execute_reply": "2024-06-24T16:49:01.031447Z"
    },
    "papermill": {
     "duration": 0.675029,
     "end_time": "2024-06-24T16:49:01.034429",
     "exception": false,
     "start_time": "2024-06-24T16:49:00.359400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm = confusion_matrix(all_true_labels, all_predicted_labels)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f7325c54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:49:01.065683Z",
     "iopub.status.busy": "2024-06-24T16:49:01.065381Z",
     "iopub.status.idle": "2024-06-24T16:49:01.071584Z",
     "shell.execute_reply": "2024-06-24T16:49:01.070714Z"
    },
    "papermill": {
     "duration": 0.023941,
     "end_time": "2024-06-24T16:49:01.073580",
     "exception": false,
     "start_time": "2024-06-24T16:49:01.049639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #Test set on image input (64*64*3 with weights frequency_based and batch size 128): 67.34%\n",
    "# Test Loss: 1.3568, Test Accuracy: 69.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.57      0.59      0.58       870\n",
    "#           NV       0.81      0.87      0.84      2127\n",
    "#          BCC       0.60      0.82      0.69       664\n",
    "#           AK       0.54      0.23      0.32       186\n",
    "#          BKL       0.54      0.24      0.33       458\n",
    "#           DF       0.86      0.12      0.21        50\n",
    "#         VASC       0.41      0.69      0.51        32\n",
    "#          SCC       0.34      0.24      0.28       120\n",
    "\n",
    "#     accuracy                           0.69      4507\n",
    "#    macro avg       0.58      0.48      0.47      4507\n",
    "# weighted avg       0.68      0.69      0.67      4507\n",
    "\n",
    "# #Test set on image input (256*256*3 with weights proportionaly-inverse, normalized and batch size 128):\n",
    "# Test Loss: 0.0378, Test Accuracy: 54.18%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.58      0.41      0.48       870\n",
    "#           NV       0.91      0.61      0.73      2127\n",
    "#          BCC       0.63      0.53      0.58       664\n",
    "#           AK       0.23      0.66      0.34       186\n",
    "#          BKL       0.25      0.47      0.33       458\n",
    "#           DF       0.20      0.50      0.28        50\n",
    "#         VASC       0.19      0.91      0.31        32\n",
    "#          SCC       0.19      0.34      0.24       120\n",
    "\n",
    "#     accuracy                           0.54      4507\n",
    "#    macro avg       0.40      0.55      0.41      4507\n",
    "# weighted avg       0.68      0.54      0.58      4507\n",
    "\n",
    "\n",
    "# #Test set on image input (256*256*3 with no weights and batch size 128): \n",
    "# Test Loss: 1.4176, Test Accuracy: 70.42%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.67      0.50      0.57       870\n",
    "#           NV       0.74      0.94      0.83      2127\n",
    "#          BCC       0.69      0.77      0.73       664\n",
    "#           AK       0.42      0.32      0.36       186\n",
    "#          BKL       0.66      0.27      0.38       458\n",
    "#           DF       0.62      0.10      0.17        50\n",
    "#         VASC       0.68      0.72      0.70        32\n",
    "#          SCC       0.44      0.19      0.27       120\n",
    "\n",
    "#     accuracy                           0.70      4507\n",
    "#    macro avg       0.62      0.47      0.50      4507\n",
    "# weighted avg       0.69      0.70      0.68      4507\n",
    "\n",
    "\n",
    "# 16*16:\n",
    "#     Test Loss: 0.9945, Test Accuracy: 65.14%\n",
    "#               precision    recall  f1-score   support\n",
    "\n",
    "#          MEL       0.59      0.48      0.53       870\n",
    "#           NV       0.78      0.90      0.83      2127\n",
    "#          BCC       0.61      0.53      0.57       664\n",
    "#           AK       0.23      0.28      0.26       186\n",
    "#          BKL       0.45      0.35      0.40       458\n",
    "#           DF       0.50      0.04      0.07        50\n",
    "#         VASC       0.83      0.31      0.45        32\n",
    "#          SCC       0.17      0.23      0.20       120\n",
    "\n",
    "#     accuracy                           0.65      4507\n",
    "#    macro avg       0.52      0.39      0.41      4507\n",
    "# weighted avg       0.64      0.65      0.64      4507\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a5ad78e",
   "metadata": {
    "papermill": {
     "duration": 0.014147,
     "end_time": "2024-06-24T16:49:01.102216",
     "exception": false,
     "start_time": "2024-06-24T16:49:01.088069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1dd917c7",
   "metadata": {
    "papermill": {
     "duration": 0.01498,
     "end_time": "2024-06-24T16:49:01.131493",
     "exception": false,
     "start_time": "2024-06-24T16:49:01.116513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 679322,
     "sourceId": 1193409,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4889.355911,
   "end_time": "2024-06-24T16:49:03.630347",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-24T15:27:34.274436",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
